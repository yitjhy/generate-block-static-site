{
  "collapse": [
    {
      "title": "components/collapse.tsx",
      "codes": "import styled from 'styled-components'\nimport React, { useState, useLayoutEffect, useRef, FC } from 'react'\nimport Header from './Header'\nimport { useSize } from 'ahooks'\n\ntype TCollapseProps = {\n  title: string\n  children: React.ReactNode | string\n  operation?: React.ReactNode | string\n  onClick?: () => void\n  showOperation?: boolean\n  isForceExpand?: boolean\n  maxHeight?: number\n}\n\nconst Collapse: FC<TCollapseProps> = ({\n  title,\n  children,\n  onClick,\n  operation,\n  showOperation = true,\n  isForceExpand = true,\n  maxHeight = 350,\n}) => {\n  const ref = useRef(null)\n  const [isExpand, setIsExpand] = useState(true)\n  const [globalIsExpand, setGlobalIsExpand] = useState(true)\n  const [offsetHeight, setOffsetHeight] = useState<number | undefined>()\n  const size = useSize(ref)\n  const handleClickHeader = () => {\n    setGlobalIsExpand(false)\n    isForceExpand && setIsExpand(!isExpand)\n    onClick && onClick()\n  }\n\n  useLayoutEffect(() => {\n    if (globalIsExpand && size) {\n      setOffsetHeight(size?.height)\n    }\n  }, [size])\n  if (!children) {\n    return <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\n  }\n  return (\n    <div>\n      <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\n      <ContentWrapper isExpand={isExpand} height={offsetHeight} maxHeight={maxHeight} ref={ref}>\n        {children}\n      </ContentWrapper>\n    </div>\n  )\n}\n\nconst ContentWrapper = styled.div<{ isExpand: boolean; height: number | undefined; maxHeight: number }>`\n  max-height: ${({ maxHeight }) => `${maxHeight}px`};\n  padding-top: 16px;\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\n  transform-origin: 50% 0;\n  height: ${({ isExpand, height }) => (isExpand ? `${height}px` : 0)};\n  opacity: ${({ isExpand }) => (isExpand ? 1 : 0)};\n  overflow: ${({ height, maxHeight }) => (Number(height) < maxHeight ? 'hidden' : 'auto')};\n  transform: ${({ isExpand }) => (isExpand ? 'scaleY(1)' : 'scaleY(0)')};\n`\n\nexport default Collapse\n"
    },
    {
      "title": "components/Header.tsx",
      "codes": "import styled from 'styled-components'\nimport React, { useState, memo, FC } from 'react'\n\ninterface HeaderProps {\n  title: string\n  showOperation: boolean\n  onClick?: Function\n  className?: string\n  operation?: React.ReactNode | string\n}\n\nconst DefaultOperation: FC<{ isExpand: boolean }> = ({ isExpand }) => (\n  <HeaderArrowIcon isExpand={isExpand}>&#9650;</HeaderArrowIcon>\n)\n\nconst Header: FC<HeaderProps> = ({ title, onClick, showOperation = true, className, operation }) => {\n  const [isExpand, setIsExpand] = useState<boolean>(false)\n  const handleClickHeader = () => {\n    setIsExpand(!isExpand)\n    onClick && onClick()\n  }\n  return (\n    <>\n      <HeaderWrapper onClick={handleClickHeader} showOperation={showOperation} className={className}>\n        <HeaderTitle>{title || 'others'}</HeaderTitle>\n        {showOperation && (operation || <DefaultOperation isExpand={isExpand} />)}\n      </HeaderWrapper>\n    </>\n  )\n}\n\nconst HeaderWrapper = styled.div<{ showOperation: boolean }>`\n  //width: 100%;\n  background: #fafafa;\n  border-radius: 8px;\n  padding: 13px 19px 13px 28px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border: 1px solid #d9d9d9;\n  cursor: ${({ showOperation }) => (showOperation ? 'pointer' : 'normal')};\n`\n\nconst HeaderTitle = styled.span`\n  font-weight: 400;\n  font-size: 18px;\n  color: #252525;\n`\n\nconst HeaderArrowIcon = styled.div<{ isExpand: boolean }>`\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\n  user-select: none;\n  transform: ${({ isExpand }) => (isExpand ? 'rotate(180deg)' : 'rotate(0deg)')};\n`\n\nexport default memo(Header)\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Collapse from './components/collapse'\nconst Demo = () => {\n  return (\n    <>\n      <Collapse title=\"This is panel header\">\n        <div>This is panel header</div>\n        <div style={{ color: '#4f7fdf' }}>\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\n          guest in many households across the world.\n        </div>\n        <div>This is panel header</div>\n        <div style={{ color: '#4f7fdf' }}>This is panel header</div>\n        <div>\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\n          guest in many households across the world.\n        </div>\n        <div>This is panel header</div>\n        <div>13erwt</div>\n        <div>13erwt</div>\n        <div style={{ color: '#4f7fdf' }}>\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\n          guest in many households across the world.\n        </div>\n        <div>13erwt</div>\n        <div>13erwt</div>\n      </Collapse>\n    </>\n  )\n}\nexport default Demo\n"
    }
  ],
  "contextmenu": [
    {
      "title": "demo.tsx",
      "codes": "// @ts-nocheck\nimport React from 'react'\nimport './index.css'\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu'\nimport { WeiboOutlined, QqOutlined, WechatOutlined } from '@ant-design/icons'\n\nconst handleClick = () => {}\n\nconst MyContextMenu = () => {\n  return (\n    <div>\n      <ContextMenuTrigger id=\"same_unique_identifier\">\n        <span className=\"well\" style={{ color: '#1890ff' }}>\n          右键点击\n        </span>\n      </ContextMenuTrigger>\n      <ContextMenu id=\"same_unique_identifier\" className=\"contextmenu\">\n        <MenuItem data={{ foo: 'copy' }} onClick={handleClick}>\n          <div className=\"in_wrapper\">\n            <WeiboOutlined style={{ marginRight: '9px' }} />\n            复制\n          </div>\n        </MenuItem>\n        <MenuItem data={{ foo: 'paste' }} onClick={handleClick}>\n          <div className=\"in_wrapper\">\n            <QqOutlined style={{ marginRight: '9px' }} />\n            粘贴\n          </div>\n        </MenuItem>\n        <MenuItem divider />\n        <MenuItem data={{ foo: 'cut' }} onClick={handleClick}>\n          <div className=\"in_wrapper\">\n            <WechatOutlined style={{ marginRight: '9px' }} />\n            剪切\n          </div>\n        </MenuItem>\n      </ContextMenu>\n    </div>\n  )\n}\n\nexport default MyContextMenu\n"
    },
    {
      "title": "index.css",
      "codes": ".contextmenu {\n  background: #e1e2e2;\n  width: 150px;\n  padding: 8px;\n  border-radius: 6px;\n  z-index: 5;\n}\n.react-contextmenu-item--selected .in_wrapper {\n  background: #5da0fb;\n  border-radius: 4px;\n  color: #fff;\n}\n.react-contextmenu-item .in_wrapper {\n  cursor: pointer;\n  margin-bottom: 4px;\n  padding: 0 9px;\n}\n"
    }
  ],
  "description": [
    {
      "title": "components/description.tsx",
      "codes": "import styled from 'styled-components'\nimport React from 'react'\nimport DescriptionItem from './descriptionItem'\n\ninterface DescriptionsProps {\n  children: React.ReactNode\n  column?: number\n  style?: React.CSSProperties\n  labelStyle?: React.CSSProperties\n  contentStyle?: React.CSSProperties\n}\n\ninterface DescriptionsContextProps {\n  labelStyle?: React.CSSProperties\n  contentStyle?: React.CSSProperties\n}\n\nconst defaultColumn = 3\nexport const DescriptionsContext = React.createContext<DescriptionsContextProps>({})\n\nfunction Description({ children, style, column = defaultColumn, labelStyle, contentStyle }: DescriptionsProps) {\n  const contextValue = React.useMemo(() => ({ labelStyle, contentStyle }), [labelStyle, contentStyle])\n  return (\n    <DescriptionsContext.Provider value={contextValue}>\n      <DescriptionWrapper style={style} column={column}>\n        {children}\n      </DescriptionWrapper>\n    </DescriptionsContext.Provider>\n  )\n}\n\nconst DescriptionWrapper = styled.span<{ column: number }>`\n  display: grid;\n  grid-template-columns: ${({ column }) => `repeat(${column}, auto)`};\n  grid-gap: 13px 0;\n`\nDescription.Item = DescriptionItem\nexport default Description\n"
    },
    {
      "title": "components/descriptionItem.tsx",
      "codes": "import React, { FC, useContext } from 'react'\nimport styled from 'styled-components'\nimport { DescriptionsContext } from './description'\n\ntype TDescriptionItemProps = {\n  label: React.ReactNode\n  children: React.ReactNode\n  labelWidth?: number\n  style?: React.CSSProperties\n  labelStyle?: React.CSSProperties\n  contentStyle?: React.CSSProperties\n}\nconst DescriptionItem: FC<TDescriptionItemProps> = ({\n  label,\n  children,\n  labelWidth,\n  style,\n  labelStyle,\n  contentStyle,\n}) => {\n  const { labelStyle: labelStyleFromContext, contentStyle: contentStyleFromContext } = useContext(DescriptionsContext)\n  return (\n    <DescriptionItemWrapper style={style}>\n      <DescriptionItemLabel\n        style={{\n          ...labelStyleFromContext,\n          ...labelStyle,\n          ...(labelWidth ? { width: labelWidth } : {}),\n        }}\n      >\n        {label}\n      </DescriptionItemLabel>\n      <DescriptionItemContent style={{ ...contentStyleFromContext, ...contentStyle }}>\n        {children}\n      </DescriptionItemContent>\n    </DescriptionItemWrapper>\n  )\n}\n\nconst DescriptionItemWrapper = styled.span`\n  display: flex;\n  align-items: center;\n`\nconst DescriptionItemLabel = styled.span`\n  font-size: 12px;\n  color: #9f9f9f;\n  text-transform: capitalize;\n  &:after {\n    content: ':';\n    margin-left: 2px;\n  }\n`\nconst DescriptionItemContent = styled.span`\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  color: #252525;\n  margin-left: 8px;\n`\nexport default DescriptionItem\n"
    },
    {
      "title": "components/index.ts",
      "codes": "import Description from './description'\nimport DescriptionItem from './descriptionItem'\n\nexport { Description, DescriptionItem }\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Description from './components/description'\nconst Demo = () => {\n  return (\n    <>\n      <Description>\n        <Description.Item label=\"Create Date\">2022-06-28 18:56:37</Description.Item>\n        <Description.Item label=\"Expiration Date\">2022-06-28 18:56:37</Description.Item>\n        <Description.Item label=\"Token Id\">0x42d4aE34624F7</Description.Item>\n        <Description.Item label=\"Create Date\">2022-06-28 18:56:37</Description.Item>\n        <Description.Item label=\"Expiration Date\">2022-06-28 18:56:37</Description.Item>\n        <Description.Item label=\"Token Id\">0x42d4aE34624F713D9</Description.Item>\n      </Description>\n    </>\n  )\n}\nexport default Demo\n"
    }
  ],
  "drag": [
    {
      "title": "components/index.tsx",
      "codes": "import { FC, ReactNode } from 'react'\nimport { DragDropContext, Draggable, Droppable, OnDragEndResponder, DropResult } from 'react-beautiful-dnd'\nimport styled from '@emotion/styled'\n\nconst QuoteItem = styled.div`\n  margin-bottom: 3px;\n`\n\nexport type TListItem = {\n  title: string\n  id: string\n}\n\ntype DroppableComProps = {\n  data: TListItem[]\n  droppableWrapperId: string\n  getItem: (item: TListItem, index: number) => ReactNode\n}\n\n// type TOnDragEndFnParams = { source: { index: number }; destination: { index: number } }\ntype DragDropContextComProps = {\n  children: ReactNode\n  onDragEndFn: (result: DropResult) => void\n}\n\nexport const DragDropContextCom: FC<DragDropContextComProps> = ({ children, onDragEndFn }) => {\n  const onDragEnd: OnDragEndResponder = (result) => {\n    if (!result.destination) {\n      return\n    }\n    if (result.destination.index === result.source.index) {\n      return\n    }\n    onDragEndFn && onDragEndFn(result)\n  }\n\n  return <DragDropContext onDragEnd={onDragEnd}>{children}</DragDropContext>\n}\n\nexport const DroppableCom: FC<DroppableComProps> = ({ getItem, data = [], droppableWrapperId = 'contentId' }) => {\n  return (\n    <Droppable droppableId={droppableWrapperId} type={droppableWrapperId}>\n      {(provided) => (\n        <div ref={provided.innerRef} {...provided.droppableProps}>\n          {data.map((item, index) => (\n            <Draggable draggableId={String(item.id)} index={index} key={item.id}>\n              {(provided) => (\n                <QuoteItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                  {getItem(item, index)}\n                </QuoteItem>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  )\n}\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import { useState } from 'react'\nimport { DragDropContextCom, DroppableCom, TListItem } from './components'\nimport { DropResult } from 'react-beautiful-dnd'\n\nconst initList: TListItem[] = [\n  { title: '111', id: 'sdd' },\n  { title: '222', id: 'dsf' },\n  { title: '333', id: 'as' },\n  { title: '444', id: 'ds' },\n  { title: '555', id: 'dgh' },\n]\n\nconst DragBlock = () => {\n  const [list, setList] = useState<TListItem[]>(initList)\n  const onDragEndFn = (dragInfo: DropResult) => {\n    const startIndex = dragInfo.source.index\n    const endIndex = dragInfo.destination?.index\n    const result = Array.from<TListItem>(list)\n    const [removed] = result.splice(startIndex, 1)\n    if (endIndex) result.splice(endIndex, 0, removed)\n    setList(result)\n  }\n\n  const getItem = (item: TListItem) => {\n    return (\n      <div\n        key={item.id}\n        style={{\n          padding: '11px 15px',\n          background: '#bac1e3',\n          borderRadius: '3px',\n        }}\n      >\n        {item.title}\n      </div>\n    )\n  }\n\n  return (\n    <DragDropContextCom onDragEndFn={onDragEndFn}>\n      <DroppableCom data={list} getItem={getItem} droppableWrapperId=\"contentId\" />\n    </DragDropContextCom>\n  )\n}\n\nexport default DragBlock\n"
    }
  ],
  "dropdown": [
    {
      "title": "components/dropdown.tsx",
      "codes": "import React, { FC } from 'react'\nimport styled from 'styled-components'\n\nexport interface DropdownProps {\n  menu: { key: string | number; label: React.ReactNode }[]\n  children?: React.ReactNode | string\n  style?: React.CSSProperties\n}\n\nconst DefaultTriggerNode = () => <DefaultTriggerWrapper>Hover me</DefaultTriggerWrapper>\n\nconst Dropdown: FC<DropdownProps> = ({ children, menu = [], style }) => {\n  return (\n    <DropdownWrapper style={style}>\n      <TriggerWrapper>{children || <DefaultTriggerNode />}</TriggerWrapper>\n      <MenuWrapper>\n        {menu.map((item) => {\n          return <div key={item.key}>{item.label}</div>\n        })}\n      </MenuWrapper>\n    </DropdownWrapper>\n  )\n}\n\nconst DefaultTriggerWrapper = styled.div`\n  font-size: 0;\n  margin-left: 10px;\n`\nconst TriggerWrapper = styled.div``\n\nconst DropdownWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  &:hover > div:nth-child(2) {\n    opacity: 1;\n    transform: scale(1);\n  }\n`\n\nconst MenuWrapper = styled.div`\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  z-index: 10;\n  top: 100%;\n  left: 10px;\n  opacity: 0;\n  transition: all ease-in 0.2s;\n  padding: 6px 0 0 0;\n  transform-origin: 0 0;\n  transform: scale(0);\n  background: #fff;\n  box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\n  border-radius: 8px;\n`\nexport const MenuItemWrapper = styled.div`\n  background: #ffffff;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  transition: all linear 0.2s;\n  padding: 8px 11px 8px 9px;\n  &:hover {\n    background: #73d37b;\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n  }\n`\n\nexport const MenuItemIcon = styled.img`\n  max-width: 12px;\n  max-height: 12px;\n  margin-right: 7px;\n`\n\nexport const MenuItemText = styled.div`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  text-transform: capitalize;\n  color: #252525;\n`\n\nexport default Dropdown\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Dropdown, { MenuItemWrapper, MenuItemText } from './components/dropdown'\nconst Demo = () => {\n  const onCopy = () => {}\n  const onViewENS = () => {}\n  return (\n    <>\n      <Dropdown\n        menu={[\n          {\n            key: 'copy',\n            label: (\n              <MenuItemWrapper onClick={onCopy}>\n                {/*<MenuItemIcon src={Images.SHOP.COPY2_PNG} />*/}\n                <MenuItemText>Copy share link</MenuItemText>\n              </MenuItemWrapper>\n            ),\n          },\n          {\n            key: 'viewExternalLink',\n            label: (\n              <MenuItemWrapper onClick={onViewENS}>\n                {/*<MenuItemIcon src={Images.SHOP.EYE_PNG} />*/}\n                <MenuItemText>View on ENS</MenuItemText>\n              </MenuItemWrapper>\n            ),\n          },\n        ]}\n      >\n        Hover me\n      </Dropdown>\n    </>\n  )\n}\nexport default Demo\n"
    }
  ],
  "highlightCode": [
    {
      "title": "demo.tsx",
      "codes": "import { useEffect, useState } from 'react'\nimport './highlight.css'\nimport { highlight, languages } from 'prismjs/components/prism-core'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-markup'\nimport 'prismjs/components/prism-javascript'\nimport 'prismjs/components/prism-jsx'\nimport 'prismjs/components/prism-typescript.js'\nimport 'prismjs/components/prism-tsx.js'\n\nconst jsxCode = `import React from 'react';\nimport { Checkbox } from 'antd';\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\n\nconst onChange = (e: CheckboxChangeEvent) => {\n  console.log(e.target.checked);\n};\n\nconst App: React.FC = () => <Checkbox onChange={onChange}>Checkbox</Checkbox>;\n\nexport default App;`\n\nconst HighlightCode = () => {\n  const [highlightCodes, setHighlightCodes] = useState<string>('')\n  const getHighlightCode = () => {\n    const res = highlight(jsxCode, languages.tsx, 'tsx')\n    setHighlightCodes(res)\n  }\n  useEffect(() => {\n    getHighlightCode()\n  }, [])\n  return (\n    <div>\n      <pre className=\"language-jsx\">\n        <code dangerouslySetInnerHTML={{ __html: highlightCodes }} />\n      </pre>\n    </div>\n  )\n}\n\nexport default HighlightCode\n"
    },
    {
      "title": "highlight.css",
      "codes": "pre,\ncode {\n  color: black;\n  font-family: 'Lucida Console', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n  line-height: 2;\n  direction: ltr;\n\n  white-space: pre;\n  text-align: left;\n  word-wrap: normal;\n  word-break: normal;\n  word-spacing: normal;\n  tab-size: 4;\n  hyphens: none;\n  background: #f8f8f8 !important;\n  font-size: 12px !important;\n}\npre {\n  padding: 12px 22px;\n  border-radius: 3px;\n  border: 1px solid #f1e9e9;\n}\nblockquote {\n  color: #666;\n  border-left: 5px solid #cbcbcb;\n  background-color: #f8f8f8;\n  font-size: 1em;\n  padding: 0 13px;\n}\nblockquote p {\n  padding: 8px 0;\n}\n\n/*高亮代码start*/\n.token.comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n  color: slategray;\n}\n\n.token.punctuation {\n  color: #999;\n}\n\n.namespace {\n  opacity: 0.7;\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.constant,\n.token.symbol,\n.token.deleted {\n  color: #f81d22;\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char,\n.token.builtin,\n.token.inserted {\n  color: #0b8235;\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.language-css .token.string,\n.style .token.string {\n  color: #0b8235;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword {\n  color: #008dff;\n}\n\n.token.function {\n  color: #f81d22;\n}\n\n.token.regex,\n.token.important,\n.token.variable {\n  color: #e90;\n}\n\n.token.important,\n.token.bold {\n  font-weight: bold;\n}\n\n.token.italic {\n  font-style: italic;\n}\n\n.token.entity {\n  cursor: help;\n}\n/*高亮代码start*/\n"
    }
  ],
  "md2html": [
    {
      "title": "demo.tsx",
      "codes": "import React, { useState } from 'react'\nimport './index.css'\nimport { marked } from 'marked'\n\nconst Md2Html = () => {\n  const [html, setHtml] = useState<string>('')\n  const md2html = (mdData: string) => {\n    return marked(mdData, {\n      renderer: new marked.Renderer(),\n      gfm: true,\n      breaks: false,\n    })\n  }\n  const onTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setHtml(md2html(e.target.value))\n  }\n  return (\n    <div className=\"md2html\">\n      <div className=\"left block\">\n        <textarea name=\"\" id=\"textarea\" onChange={onTextareaChange} placeholder=\"请输入md\" />\n      </div>\n      <div className=\"right block\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  )\n}\n\nexport default Md2Html\n"
    },
    {
      "title": "index.css",
      "codes": ".md2html {\n  display: flex;\n  width: 100%;\n}\n.block {\n  width: 50%;\n  height: 600px;\n  padding: 10px 15px 0;\n  border-radius: 3px;\n  border: 1px solid rgba(0, 0, 0, 0.06);\n}\n.left {\n  background: #292d3e;\n  position: relative;\n}\n.right {\n  overflow: scroll;\n  margin-left: 12px;\n}\n#textarea {\n  width: 100%;\n  display: block;\n  resize: none;\n  height: 100%;\n  outline: none;\n  border: none;\n  background: #292d3e;\n  color: #fff;\n  padding: 0;\n}\nblockquote {\n  margin: 0;\n}\n"
    }
  ],
  "popover": [
    {
      "title": "components/popover.tsx",
      "codes": "import styled from 'styled-components'\nimport React, { FC } from 'react'\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  children: React.ReactNode\n}\n\nconst Popover: FC<PopoverProps> = ({ content, children }) => {\n  return (\n    <PopoverWrapper>\n      <TriggerWrapper>{children}</TriggerWrapper>\n      <Content>{content}</Content>\n    </PopoverWrapper>\n  )\n}\n\nconst TriggerWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst PopoverWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  &:hover > div:nth-child(2) {\n    opacity: 1;\n    z-index: 3;\n    transform: scale(1);\n  }\n`\n\nconst Content = styled.div`\n  position: absolute;\n  z-index: -1;\n  white-space: nowrap;\n  top: calc(100% + 13px);\n  left: 10px;\n  opacity: 0;\n  transition: all ease-in 0.2s;\n  padding: 13px 23px 13px 15px;\n  background: #fff;\n  box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\n  border-radius: 8px;\n  transform-origin: 0 0;\n  transform: scale(0);\n  &:after {\n    content: '';\n    position: absolute;\n    z-index: 2;\n    left: 14px;\n    top: 0;\n    width: 13px;\n    height: 13px;\n    background: #fff;\n    border-radius: 2px;\n    transform: rotate(45deg) translateY(-50%);\n  }\n`\nexport default Popover\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Popover from './components/popover'\nconst Demo = () => {\n  return (\n    <>\n      <Popover\n        content={\n          <>\n            <div>Content1Content1Content1</div>\n            <div>Content2Content2Content2</div>\n            <div>Content3Content3Content3</div>\n            <div>Content4Content4Content4</div>\n            <div>Content5Content5Content5</div>\n          </>\n        }\n      >\n        Hover me\n      </Popover>\n    </>\n  )\n}\nexport default Demo\n"
    }
  ],
  "table": [
    {
      "title": "components/Sortable.tsx",
      "codes": "import { CSSProperties, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\n\nexport enum Sort {\n  DEFAULT,\n  DESC,\n  ASC,\n}\nexport default function Sortable(props: {\n  value: Sort\n  onChange: (sort: Sort) => void\n  className?: string\n  style?: CSSProperties\n}) {\n  const ref = useRef<HTMLSpanElement>(null)\n  useEffect(() => {\n    const el = ref.current?.parentElement\n    if (el) {\n      const clickHandler = () => {\n        props.onChange(props.value === Sort.DEFAULT ? Sort.DESC : props.value === Sort.DESC ? Sort.ASC : Sort.DEFAULT)\n      }\n      el.addEventListener('click', clickHandler)\n      return () => {\n        el.removeEventListener('click', clickHandler)\n      }\n    }\n  }, [props.value])\n  return (\n    <SortableWrapper ref={ref} className={props.className} style={props.style}>\n      <Triangle src={props.value === Sort.ASC ? 'Images.TABLE.UP_ACTIVE_SVG' : 'Images.TABLE.UP_SVG'} />\n      <Triangle src={props.value === Sort.DESC ? 'Images.TABLE.DOWN_ACTIVE_SVG' : 'Images.TABLE.DOWN_SVG'} />\n    </SortableWrapper>\n  )\n}\n\nconst SortableWrapper = styled.span`\n  height: 14px;\n  width: 7px;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  margin-left: 4px;\n`\n\nconst Triangle = styled.img`\n  width: 7px;\n  height: 7px;\n`\n"
    },
    {
      "title": "components/Table.tsx",
      "codes": "import { CSSProperties } from 'react'\nimport styled, { css } from 'styled-components'\nimport Sortable, { Sort } from './Sortable'\n\nexport type TableAlign = 'left' | 'center' | 'right'\n\nexport interface TableColumn<T extends object> {\n  name: string\n  headStyle?: CSSProperties\n  itemStyle?: CSSProperties\n  key?: keyof T\n  render?: (data: T, index: number, key?: keyof T) => JSX.Element | string\n  flex?: number\n  width?: string\n  align?: TableAlign\n  sortable?: boolean\n  sort?: Sort\n}\n\nexport default function Table<T extends object>(props: {\n  data: T[]\n  columns: TableColumn<T>[]\n  gap?: string\n  keyName?: keyof T\n  loading?: boolean\n  className?: string\n  style?: CSSProperties\n  updateColumns?: (columns: TableColumn<T>[]) => void\n  onRowClick?: (data: T, index: number) => void\n}) {\n  return (\n    <TableWrapper style={props.style} className={props.className}>\n      <TableHeader className={'table-header'} gap={props.gap}>\n        {props.columns.map((column) => (\n          <Th\n            key={column.name}\n            className={'table-th'}\n            style={column.headStyle}\n            width={column.width}\n            flex={column.flex || 1}\n            clickable={column.sortable}\n          >\n            {column.name}{' '}\n            {column.sortable && (\n              <Sortable\n                value={column.sort || Sort.DEFAULT}\n                onChange={(sort: Sort) => {\n                  const clonedColumns: typeof props.columns = JSON.parse(JSON.stringify(props.columns))\n                  const target = clonedColumns.find((x) => x.name === column.name)\n                  if (target) {\n                    target.sort = sort\n                    props.updateColumns && props.updateColumns(clonedColumns)\n                  }\n                }}\n              />\n            )}\n          </Th>\n        ))}\n      </TableHeader>\n      <TableBody className={'table-body'}>\n        {props.data.map((d, index) => (\n          <TableRow\n            onClick={() => props.onRowClick && props.onRowClick(d, index)}\n            key={props.keyName ? (d[props.keyName] as any as string) : index}\n            className={'table-row'}\n            gap={props.gap}\n            clickable={!!props.onRowClick}\n          >\n            {props.columns.map((column) => {\n              let renderResult = column.render\n                ? column.render(d, index, column.key)\n                : column.key\n                ? (d[column.key] as any as string)\n                : column.key\n              // @ts-ignore\n              if ([undefined, '', null].includes(renderResult)) {\n                renderResult = '-'\n              }\n\n              return (\n                <Td\n                  key={column.name}\n                  style={column.itemStyle}\n                  className={'table-td'}\n                  flex={column.flex || 1}\n                  width={column.width}\n                  align={column.align}\n                >\n                  {/*//@ts-ignore*/}\n                  {renderResult}\n                </Td>\n              )\n            })}\n          </TableRow>\n        ))}\n      </TableBody>\n    </TableWrapper>\n  )\n}\n\nconst TableWrapper = styled.div`\n  width: 100%;\n  position: relative;\n`\nconst TableHeader = styled.div<{ gap?: string }>`\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  border-radius: 5px;\n  background: #f6f6f6;\n  & > :first-child {\n    margin-left: 0;\n  }\n  & > * {\n    margin-left: ${({ gap }) => gap || 0};\n  }\n`\n\nconst Th = styled.span<{ width?: string; flex?: number; clickable?: boolean }>`\n  user-select: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  ${({ width }) =>\n    width\n      ? css`\n          width: ${width};\n        `\n      : ''};\n  ${({ flex, width }) =>\n    !width && flex\n      ? css`\n          flex: ${flex};\n        `\n      : ''};\n  font-size: 14px;\n  color: #9f9f9f;\n  text-align: center;\n  cursor: ${(props) => (props.clickable ? 'pointer' : 'inherit')};\n`\nconst TableBody = styled.ul`\n  width: 100%;\n  position: relative;\n  padding: 0;\n`\n\nconst TableRow = styled.li<{ gap?: string; clickable?: boolean }>`\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  cursor: ${(props) => {\n    return !!props.clickable ? 'pointer' : 'inherit'\n  }};\n  & > :first-child {\n    margin-left: 0;\n  }\n  & > * {\n    margin-left: ${({ gap }) => gap || 0};\n  }\n  border-radius: 5px;\n  transition: all 0.15s linear;\n  &:hover {\n    box-shadow: 0px 4px 10px rgba(114, 175, 120, 0.1);\n  }\n  border-bottom: solid 1px #e2e2e2;\n`\nconst Td = styled.div<{ width?: string; flex?: number; align?: TableAlign }>`\n  height: 100%;\n  ${({ width }) =>\n    width\n      ? css`\n          width: ${width};\n        `\n      : ''};\n  ${({ flex, width }) =>\n    !width && flex\n      ? css`\n          flex: ${flex};\n        `\n      : ''};\n  font-size: 14px;\n  color: #737373;\n  line-height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: ${({ align }) => (align === 'left' ? 'flex-start' : align === 'right' ? 'flex-end' : 'center')};\n  position: relative;\n`\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Table, { TableColumn } from './components/Table'\n\ntype TListItem = {\n  price: number\n  price_usd: number\n  expiration: string\n  from: string\n}\nconst columns: TableColumn<TListItem>[] = [\n  {\n    name: 'Price',\n    sortable: false,\n    key: 'price',\n  },\n  {\n    name: 'USD Price',\n    sortable: false,\n    key: 'price_usd',\n    render: (data) => (data.price_usd ? `¥${data.price_usd}` : '-'),\n  },\n  {\n    name: 'Expiration',\n    sortable: false,\n    key: 'expiration',\n  },\n  {\n    name: 'From',\n    sortable: false,\n    key: 'from',\n  },\n]\nconst Demo = () => {\n  const tableData: TListItem[] = [\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '四川省成都市' },\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '四川省成都市' },\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '四川省成都市' },\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '四川省成都市' },\n  ]\n  return (\n    <>\n      <Table data={tableData} columns={columns} />\n    </>\n  )\n}\nexport default Demo\n"
    }
  ],
  "tabs": [
    {
      "title": "components/tabs.tsx",
      "codes": "import styled from 'styled-components'\nimport React, { useState, useEffect, FC } from 'react'\n\nconst TabsContentWrapper = styled.div`\n  width: 100%;\n`\n\nconst TabsWrapper = styled.div`\n  display: flex;\n  position: relative;\n`\n\nconst TabsItem = styled.div<{ isChecked: boolean }>`\n  font-style: normal;\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  text-transform: capitalize;\n  color: ${({ isChecked }) => (isChecked ? '#1677ff' : '#252525')};\n  text-shadow: 0 0 0.25px currentcolor;\n  margin-right: 52px;\n  cursor: pointer;\n  transition: all linear 0.15s;\n  user-select: none;\n  padding: 0 8px;\n  display: flex;\n  align-items: center;\n  &:hover {\n    color: #1677ff;\n  }\n`\n\nconst Line = styled.div<{ left: number; width: number }>`\n  width: 100%;\n  height: 1px;\n  background: #e2e2e2;\n  position: relative;\n  margin-top: 10px;\n  margin-bottom: 16px;\n  &::after {\n    content: '';\n    position: absolute;\n    width: ${({ width }) => width + 'px'};\n    height: 2px;\n    background: #1677ff;\n    left: ${({ left }) => left + 'px'};\n    top: 0;\n    transition: all linear 0.15s;\n  }\n`\n\nexport interface TabsItemProps {\n  key: string\n  label: React.ReactNode | string\n  children: JSX.Element | string\n}\n\nexport type tabsHeaderProps = Omit<TabsItemProps, 'children'>\n\ninterface TabsProps {\n  items: TabsItemProps[]\n  defaultTab?: string\n  onChange?: (val: tabsHeaderProps) => void\n}\n\nconst Tabs: FC<TabsProps> = ({ items, onChange, defaultTab }) => {\n  const [checkedId, setCheckedId] = useState<string>()\n  const [offsetLeft, setOffsetLeft] = useState(0)\n  const [offsetWidth, setOffsetWidth] = useState(0)\n\n  const tabsHeaderData: tabsHeaderProps[] = items.map((item) => {\n    return {\n      key: item.key,\n      label: item.label,\n    }\n  })\n\n  const getDefaultActiveKey = () => {\n    const activeKey = items[0]?.key\n    setCheckedId(activeKey)\n    return activeKey\n  }\n\n  const handleClick = (data: tabsHeaderProps, e: React.MouseEvent<HTMLDivElement>) => {\n    setOffsetLeft((e.target as HTMLDivElement).offsetLeft)\n    setOffsetWidth((e.target as HTMLDivElement).offsetWidth)\n    setCheckedId(data.key)\n    if (onChange) onChange(data)\n  }\n\n  useEffect(() => {\n    if (defaultTab) setCheckedId(defaultTab)\n    if (!defaultTab) getDefaultActiveKey()\n  }, [defaultTab])\n  return (\n    <>\n      <TabsContentWrapper>\n        <TabsWrapper>\n          {tabsHeaderData.map((item) => {\n            return (\n              <TabsItem\n                isChecked={item.key === checkedId}\n                key={item.key}\n                ref={(node) => {\n                  if (checkedId === item.key) {\n                    const offsetWidth = (node as HTMLDivElement)?.offsetWidth\n                    const offsetLeft = (node as HTMLDivElement)?.offsetLeft\n                    if (offsetWidth) {\n                      setOffsetWidth(offsetWidth)\n                      setOffsetLeft(offsetLeft)\n                    }\n                  }\n                }}\n                onClick={(e) => {\n                  handleClick(item, e)\n                }}\n              >\n                {item.label}\n              </TabsItem>\n            )\n          })}\n        </TabsWrapper>\n        <Line left={offsetLeft} width={offsetWidth} />\n        {items.map((item) => {\n          return (\n            <div key={item.key} style={{ display: item.key === checkedId ? 'block' : 'none' }}>\n              {item.children}\n            </div>\n          )\n        })}\n      </TabsContentWrapper>\n    </>\n  )\n}\n\nexport default Tabs\n"
    },
    {
      "title": "demo.tsx",
      "codes": "import Tabs, { TabsItemProps } from './components/tabs'\nconst Demo = () => {\n  const tabsData: TabsItemProps[] = [\n    {\n      key: 'categories',\n      label: 'Top Categories',\n      children: (\n        <>\n          <div>Top Categories Top Categories Top Categories</div>\n          <div>Top Categories Top Categories Top Categories</div>\n          <div>Top Categories Top Categories Top Categories</div>\n          <div>Top Categories Top Categories Top Categories</div>\n          <div>Top Categories Top Categories Top Categories</div>\n        </>\n      ),\n    },\n    {\n      key: 'sales',\n      label: 'Top Sales',\n      children: (\n        <>\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\n        </>\n      ),\n    },\n    {\n      key: 'owners',\n      label: 'Top Owners',\n      children: (\n        <>\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\n        </>\n      ),\n    },\n    {\n      key: 'gainers',\n      label: 'Top Gainers',\n      children: (\n        <>\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\n        </>\n      ),\n    },\n  ]\n  return (\n    <>\n      <Tabs\n        // defaultTab='categories'\n        items={tabsData}\n        onChange={(data) => {\n          console.log(data)\n        }}\n      />\n    </>\n  )\n}\nexport default Demo\n"
    }
  ]
}

{"dragindex":"import React, { useState } from 'react';\nimport { DragDropContextCom, DroppableCom } from \"./drag\";\n\nconst initList = [\n  {title: '111', id: 'sdd'},\n  {title: '222', id: 'dsf'},\n  {title: '333', id: 'xdcsd'},\n  {title: '444', id: 'sdaqw'},\n  {title: '555', id: 'sdfsdxcvc'},\n  {title: '666', id: 'dfvxc'},\n  {title: '777', id: 'vcbv'},\n  {title: '888', id: 'yuf'},\n  {title: '999', id: 'dfgcvqqw'},\n]\n\nconst Template = () => {\n    const [list, setList] = useState(initList);\n    const onDragEndFn = dragInfo => {\n          const {source: {index: startIndex}, destination: {index: endIndex}} = dragInfo;\n          const result = Array.from(list);\n          const [removed] = result.splice(startIndex, 1);\n          result.splice(endIndex, 0, removed);\n          setList(result)\n    }\n    \n    const getItem = (item, index) => {\n      return <div key={item.id} \n                  style={{\n                      padding: '11px 15px', \n                      background: '#bac1e3',\n                      borderRadius: '3px'\n                  }}\n      >\n        {item.title}\n      </div>\n    }\n  \n    return <DragDropContextCom onDragEndFn={onDragEndFn}>\n        <DroppableCom data={list} getItem={getItem} droppableWrapperId='contentId' />\n    </DragDropContextCom>\n}\n\nexport default Template\n","hightlightCodeindex":"import React, {useEffect, useState} from \"react\";\nimport './highlight.css';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-markup';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\n\n\nconst jsxCode = \"import { Checkbox } from 'antd';\\n\" +\n    \"\\n\" +\n    \"function onChange(e) {\\n\" +\n    \"  console.log(`checked1133 = ${e.target.checked}`);\\n\" +\n    \"}\\n\" +\n    \"\\n\" +\n    \"ReactDOM.render(<Checkbox onChange={onChange}>Checkbox</Checkbox>, mountNode);\"\n\nconst HightlightCode = () => {\n    const [highlightCodes, setHighlightCodes] = useState('');\n\n    const getHighlightCode = () => {\n        const res = highlight(jsxCode, languages.jsx, 'jsx')\n        setHighlightCodes(res);\n    };\n\n    useEffect(() => {\n        getHighlightCode()\n    }, [])\n    return (\n        <div>\n            <pre className=\"language-jsx\">\n                <code dangerouslySetInnerHTML={{ __html: highlightCodes }} />\n            </pre>\n        </div>\n    )\n};\n\nexport default HightlightCode;\n"}
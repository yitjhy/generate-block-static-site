"use strict";(self.webpackChunkblock_static_site=self.webpackChunkblock_static_site||[]).push([[287],{8795:function(n,e,t){t.d(e,{Z:function(){return h}});var o=t(885),r=t(7363),a=t(3136),i=t(6155),s=t(5009),d=t(2006),p=t(6407),l=t(306),c=t(802),m=t(6107),f=(t(2170),t(1360),t(8180),t(6857),t(8165),t(1967),t(6417)),g=function(n){var e=n.code,t=(0,r.useState)(""),a=(0,o.Z)(t,2),i=a[0],s=a[1];return(0,r.useEffect)((function(){!function(){var n=(0,m.highlight)(e,m.languages.tsx,"tsx");s(n)}()}),[]),(0,f.jsx)("div",{children:(0,f.jsx)("pre",{className:"language-jsx",children:(0,f.jsx)("code",{dangerouslySetInnerHTML:{__html:i}})})})},u=t(3538),x=JSON.parse('{"card":{"title":"Card","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","card.tsx":"import React, { FC } from \'react\'\\nimport styled from \'styled-components\'\\n\\ntype CardTemplateProps = {\\n  background?: string\\n  header: React.ReactNode\\n  bottom: React.ReactNode\\n}\\nconst defaultBackground = \'linear-gradient(170.12deg, #6b95f5 -3.26%, #2cd6d6 45.41%, #47b8f1 96.76%)\'\\nconst CardTemplate: FC<CardTemplateProps> = ({ background = defaultBackground, header, bottom }) => {\\n  return (\\n    <CardWrapper background={background}>\\n      <div className=\\"cardHeaderWrapper\\">{header}</div>\\n      <div className=\\"cardBottomWrapper\\">{bottom}</div>\\n    </CardWrapper>\\n  )\\n}\\n\\nconst CardWrapper = styled.div<{ background: string }>`\\n  width: 206px;\\n  height: 225px;\\n  background: ${({ background }) => background};\\n  box-shadow: 0 4px 10px rgba(39, 39, 39, 0.15);\\n  border-radius: 14px;\\n  padding-top: 13px;\\n  display: flex;\\n  justify-content: space-between;\\n  flex-direction: column;\\n  transition: all linear 0.2s;\\n  :hover {\\n    transform: translateY(-2px);\\n  }\\n  &:hover {\\n    box-shadow: 0 4px 15px rgba(94, 212, 151, 0.25);\\n  }\\n`\\n\\nexport default CardTemplate\\n","demo.tsx":"import styled from \'styled-components\'\\nimport CardTemplate from \'./card\'\\n\\nconst CardBottom = () => {\\n  return (\\n    <CardBottomWrapper>\\n      <span className=\\"domainName\\">yitjhy.bnb</span>\\n      <div className=\\"cardBottomWrapper\\">\\n        <DescriptionInfoWrapper>\\n          <span className=\\"descriptionText\\">Owners</span>\\n          <span className=\\"descriptionText\\">0x88cF...f5b5</span>\\n        </DescriptionInfoWrapper>\\n        <OtherDescriptionInfoWrapper>\\n          <span className=\\"descriptionText\\">Expires</span>\\n          <span className=\\"descriptionText\\">2023.11.30</span>\\n        </OtherDescriptionInfoWrapper>\\n      </div>\\n    </CardBottomWrapper>\\n  )\\n}\\n\\nconst Demo = () => {\\n  return (\\n    <CardListWrapper>\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: \'13px\', fontSize: 25, color: \'#fff\' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n    </CardListWrapper>\\n  )\\n}\\nconst CardListWrapper = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, 206px);\\n  grid-gap: 10px;\\n  justify-content: space-between;\\n`\\nconst CardBottomWrapper = styled.div`\\n  .domainName {\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 28px;\\n    color: #ffffff;\\n    text-shadow: 0 4px 4px rgba(0, 0, 0, 0.15);\\n    margin-left: 13px;\\n    margin-bottom: 7px;\\n  }\\n  .cardBottomWrapper {\\n    background: #f8f8f8;\\n    border-radius: 13px;\\n    padding: 17px 14px 16px 20px;\\n    margin-top: 7px;\\n  }\\n`\\nconst DescriptionInfoWrapper = styled.div`\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  .descriptionText {\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 12px;\\n    color: #9f9f9f;\\n  }\\n`\\nconst OtherDescriptionInfoWrapper = styled(DescriptionInfoWrapper)`\\n  margin-top: 19px;\\n`\\nexport default Demo\\n"}},"collapse":{"title":"Collapse \u6298\u53e0\u9762\u677f","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","ahooks":"3.7.4","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/collapse.tsx":"import styled from \'styled-components\'\\nimport React, { useState, useLayoutEffect, useRef, FC } from \'react\'\\nimport Header from \'./Header\'\\nimport { useSize } from \'ahooks\'\\n\\ntype TCollapseProps = {\\n  title: string\\n  children: React.ReactNode | string\\n  operation?: React.ReactNode | string\\n  onClick?: () => void\\n  showOperation?: boolean\\n  isForceExpand?: boolean\\n  maxHeight?: number\\n}\\n\\nconst Collapse: FC<TCollapseProps> = ({\\n  title,\\n  children,\\n  onClick,\\n  operation,\\n  showOperation = true,\\n  isForceExpand = true,\\n  maxHeight = 350,\\n}) => {\\n  const ref = useRef(null)\\n  const [isExpand, setIsExpand] = useState(true)\\n  const [globalIsExpand, setGlobalIsExpand] = useState(true)\\n  const [offsetHeight, setOffsetHeight] = useState<number | undefined>()\\n  const size = useSize(ref)\\n  const handleClickHeader = () => {\\n    setGlobalIsExpand(false)\\n    isForceExpand && setIsExpand(!isExpand)\\n    onClick && onClick()\\n  }\\n\\n  useLayoutEffect(() => {\\n    if (globalIsExpand && size) {\\n      setOffsetHeight(size?.height)\\n    }\\n  }, [size])\\n  if (!children) {\\n    return <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\\n  }\\n  return (\\n    <div>\\n      <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\\n      <ContentWrapper isExpand={isExpand} height={offsetHeight} maxHeight={maxHeight} ref={ref}>\\n        {children}\\n      </ContentWrapper>\\n    </div>\\n  )\\n}\\n\\nconst ContentWrapper = styled.div<{ isExpand: boolean; height: number | undefined; maxHeight: number }>`\\n  max-height: ${({ maxHeight }) => `${maxHeight}px`};\\n  padding-top: 16px;\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  transform-origin: 50% 0;\\n  height: ${({ isExpand, height }) => (isExpand ? `${height}px` : 0)};\\n  opacity: ${({ isExpand }) => (isExpand ? 1 : 0)};\\n  overflow: ${({ height, maxHeight }) => (Number(height) < maxHeight ? \'hidden\' : \'auto\')};\\n  transform: ${({ isExpand }) => (isExpand ? \'scaleY(1)\' : \'scaleY(0)\')};\\n`\\n\\nexport default Collapse\\n","components/Header.tsx":"import styled from \'styled-components\'\\nimport React, { useState, memo, FC } from \'react\'\\n\\ninterface HeaderProps {\\n  title: string\\n  showOperation: boolean\\n  onClick?: Function\\n  className?: string\\n  operation?: React.ReactNode | string\\n}\\n\\nconst DefaultOperation: FC<{ isExpand: boolean }> = ({ isExpand }) => (\\n  <HeaderArrowIcon isExpand={isExpand}>&#9650;</HeaderArrowIcon>\\n)\\n\\nconst Header: FC<HeaderProps> = ({ title, onClick, showOperation = true, className, operation }) => {\\n  const [isExpand, setIsExpand] = useState<boolean>(false)\\n  const handleClickHeader = () => {\\n    setIsExpand(!isExpand)\\n    onClick && onClick()\\n  }\\n  return (\\n    <>\\n      <HeaderWrapper onClick={handleClickHeader} showOperation={showOperation} className={className}>\\n        <HeaderTitle>{title || \'others\'}</HeaderTitle>\\n        {showOperation && (operation || <DefaultOperation isExpand={isExpand} />)}\\n      </HeaderWrapper>\\n    </>\\n  )\\n}\\n\\nconst HeaderWrapper = styled.div<{ showOperation: boolean }>`\\n  //width: 100%;\\n  background: #fafafa;\\n  border-radius: 8px;\\n  padding: 13px 19px 13px 28px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border: 1px solid #d9d9d9;\\n  cursor: ${({ showOperation }) => (showOperation ? \'pointer\' : \'normal\')};\\n`\\n\\nconst HeaderTitle = styled.span`\\n  font-weight: 400;\\n  font-size: 18px;\\n  color: #252525;\\n`\\n\\nconst HeaderArrowIcon = styled.div<{ isExpand: boolean }>`\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  user-select: none;\\n  transform: ${({ isExpand }) => (isExpand ? \'rotate(180deg)\' : \'rotate(0deg)\')};\\n`\\n\\nexport default memo(Header)\\n","demo.tsx":"import Collapse from \'./components/collapse\'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Collapse title=\\"This is panel header\\">\\n        <div>This is panel header</div>\\n        <div style={{ color: \'#4f7fdf\' }}>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>This is panel header</div>\\n        <div style={{ color: \'#4f7fdf\' }}>This is panel header</div>\\n        <div>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>This is panel header</div>\\n        <div>13erwt</div>\\n        <div>13erwt</div>\\n        <div style={{ color: \'#4f7fdf\' }}>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>13erwt</div>\\n        <div>13erwt</div>\\n      </Collapse>\\n    </>\\n  )\\n}\\nexport default Demo\\n"}},"contextmenu":{"title":"\u53f3\u952e\u83dc\u5355","template":"create-react-app","dependencies":{"@ant-design/icons":"4.7.0","@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-contextmenu":"2.14.0","react-dom":"18.0.0","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","demo.tsx":"// @ts-nocheck\\nimport React from \'react\'\\nimport \'./index.css\'\\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \'react-contextmenu\'\\nimport { WeiboOutlined, QqOutlined, WechatOutlined } from \'@ant-design/icons\'\\n\\nconst handleClick = () => {}\\n\\nconst MyContextMenu = () => {\\n  return (\\n    <div>\\n      <ContextMenuTrigger id=\\"same_unique_identifier\\">\\n        <span className=\\"well\\" style={{ color: \'#1890ff\' }}>\\n          \u53f3\u952e\u70b9\u51fb\\n        </span>\\n      </ContextMenuTrigger>\\n      <ContextMenu id=\\"same_unique_identifier\\" className=\\"contextmenu\\">\\n        <MenuItem data={{ foo: \'copy\' }} onClick={handleClick}>\\n          <div className=\\"in_wrapper\\">\\n            <WeiboOutlined style={{ marginRight: \'9px\' }} />\\n            \u590d\u5236\\n          </div>\\n        </MenuItem>\\n        <MenuItem data={{ foo: \'paste\' }} onClick={handleClick}>\\n          <div className=\\"in_wrapper\\">\\n            <QqOutlined style={{ marginRight: \'9px\' }} />\\n            \u7c98\u8d34\\n          </div>\\n        </MenuItem>\\n        <MenuItem divider />\\n        <MenuItem data={{ foo: \'cut\' }} onClick={handleClick}>\\n          <div className=\\"in_wrapper\\">\\n            <WechatOutlined style={{ marginRight: \'9px\' }} />\\n            \u526a\u5207\\n          </div>\\n        </MenuItem>\\n      </ContextMenu>\\n    </div>\\n  )\\n}\\n\\nexport default MyContextMenu\\n","index.css":".contextmenu {\\n  background: #e1e2e2;\\n  width: 150px;\\n  padding: 8px;\\n  border-radius: 6px;\\n  z-index: 5;\\n}\\n.react-contextmenu-item--selected .in_wrapper {\\n  background: #5da0fb;\\n  border-radius: 4px;\\n  color: #fff;\\n}\\n.react-contextmenu-item .in_wrapper {\\n  cursor: pointer;\\n  margin-bottom: 4px;\\n  padding: 0 9px;\\n}\\n"}},"description":{"title":"Descriptions \u63cf\u8ff0\u5217\u8868","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/description.tsx":"import styled from \'styled-components\'\\nimport React from \'react\'\\nimport DescriptionItem from \'./descriptionItem\'\\n\\ninterface DescriptionsProps {\\n  children: React.ReactNode\\n  column?: number\\n  style?: React.CSSProperties\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\n\\ninterface DescriptionsContextProps {\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\n\\nconst defaultColumn = 3\\nexport const DescriptionsContext = React.createContext<DescriptionsContextProps>({})\\n\\nfunction Description({ children, style, column = defaultColumn, labelStyle, contentStyle }: DescriptionsProps) {\\n  const contextValue = React.useMemo(() => ({ labelStyle, contentStyle }), [labelStyle, contentStyle])\\n  return (\\n    <DescriptionsContext.Provider value={contextValue}>\\n      <DescriptionWrapper style={style} column={column}>\\n        {children}\\n      </DescriptionWrapper>\\n    </DescriptionsContext.Provider>\\n  )\\n}\\n\\nconst DescriptionWrapper = styled.span<{ column: number }>`\\n  display: grid;\\n  grid-template-columns: ${({ column }) => `repeat(${column}, auto)`};\\n  grid-gap: 13px 0;\\n`\\nDescription.Item = DescriptionItem\\nexport default Description\\n","components/descriptionItem.tsx":"import React, { FC, useContext } from \'react\'\\nimport styled from \'styled-components\'\\nimport { DescriptionsContext } from \'./description\'\\n\\ntype TDescriptionItemProps = {\\n  label: React.ReactNode\\n  children: React.ReactNode\\n  labelWidth?: number\\n  style?: React.CSSProperties\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\nconst DescriptionItem: FC<TDescriptionItemProps> = ({\\n  label,\\n  children,\\n  labelWidth,\\n  style,\\n  labelStyle,\\n  contentStyle,\\n}) => {\\n  const { labelStyle: labelStyleFromContext, contentStyle: contentStyleFromContext } = useContext(DescriptionsContext)\\n  return (\\n    <DescriptionItemWrapper style={style}>\\n      <DescriptionItemLabel\\n        style={{\\n          ...labelStyleFromContext,\\n          ...labelStyle,\\n          ...(labelWidth ? { width: labelWidth } : {}),\\n        }}\\n      >\\n        {label}\\n      </DescriptionItemLabel>\\n      <DescriptionItemContent style={{ ...contentStyleFromContext, ...contentStyle }}>\\n        {children}\\n      </DescriptionItemContent>\\n    </DescriptionItemWrapper>\\n  )\\n}\\n\\nconst DescriptionItemWrapper = styled.span`\\n  display: flex;\\n  align-items: center;\\n`\\nconst DescriptionItemLabel = styled.span`\\n  font-size: 12px;\\n  color: #9f9f9f;\\n  text-transform: capitalize;\\n  &:after {\\n    content: \':\';\\n    margin-left: 2px;\\n  }\\n`\\nconst DescriptionItemContent = styled.span`\\n  display: flex;\\n  align-items: center;\\n  font-size: 14px;\\n  color: #252525;\\n  margin-left: 8px;\\n`\\nexport default DescriptionItem\\n","components/index.ts":"import Description from \'./description\'\\nimport DescriptionItem from \'./descriptionItem\'\\n\\nexport { Description, DescriptionItem }\\n","demo.tsx":"import Description from \'./components/description\'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Description>\\n        <Description.Item label=\\"Create Date\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\"Expiration Date\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\"Token Id\\">0x42d4aE34624F7</Description.Item>\\n        <Description.Item label=\\"Create Date\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\"Expiration Date\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\"Token Id\\">0x42d4aE34624F713D9</Description.Item>\\n      </Description>\\n    </>\\n  )\\n}\\nexport default Demo\\n"}},"drag":{"title":"\u62d6\u62fd\u4ee3\u7801\u5757","template":"create-react-app","dependencies":{"@emotion/react":"11.9.0","@emotion/styled":"11.8.1","@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-beautiful-dnd":"13.1.0","react-dom":"18.0.0","@types/react-beautiful-dnd":"13.1.3","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/index.tsx":"import { FC, ReactNode } from \'react\'\\nimport { DragDropContext, Draggable, Droppable, OnDragEndResponder, DropResult } from \'react-beautiful-dnd\'\\nimport styled from \'@emotion/styled\'\\n\\nconst QuoteItem = styled.div`\\n  margin-bottom: 3px;\\n`\\n\\nexport type TListItem = {\\n  title: string\\n  id: string\\n}\\n\\ntype DroppableComProps = {\\n  data: TListItem[]\\n  droppableWrapperId: string\\n  getItem: (item: TListItem, index: number) => ReactNode\\n}\\n\\n// type TOnDragEndFnParams = { source: { index: number }; destination: { index: number } }\\ntype DragDropContextComProps = {\\n  children: ReactNode\\n  onDragEndFn: (result: DropResult) => void\\n}\\n\\nexport const DragDropContextCom: FC<DragDropContextComProps> = ({ children, onDragEndFn }) => {\\n  const onDragEnd: OnDragEndResponder = (result) => {\\n    if (!result.destination) {\\n      return\\n    }\\n    if (result.destination.index === result.source.index) {\\n      return\\n    }\\n    onDragEndFn && onDragEndFn(result)\\n  }\\n\\n  return <DragDropContext onDragEnd={onDragEnd}>{children}</DragDropContext>\\n}\\n\\nexport const DroppableCom: FC<DroppableComProps> = ({ getItem, data = [], droppableWrapperId = \'contentId\' }) => {\\n  return (\\n    <Droppable droppableId={droppableWrapperId} type={droppableWrapperId}>\\n      {(provided) => (\\n        <div ref={provided.innerRef} {...provided.droppableProps}>\\n          {data.map((item, index) => (\\n            <Draggable draggableId={String(item.id)} index={index} key={item.id}>\\n              {(provided) => (\\n                <QuoteItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\\n                  {getItem(item, index)}\\n                </QuoteItem>\\n              )}\\n            </Draggable>\\n          ))}\\n          {provided.placeholder}\\n        </div>\\n      )}\\n    </Droppable>\\n  )\\n}\\n","demo.tsx":"import { useState } from \'react\'\\nimport { DragDropContextCom, DroppableCom, TListItem } from \'./components\'\\nimport { DropResult } from \'react-beautiful-dnd\'\\n\\nconst initList: TListItem[] = [\\n  { title: \'111\', id: \'sdd\' },\\n  { title: \'222\', id: \'dsf\' },\\n  { title: \'333\', id: \'as\' },\\n  { title: \'444\', id: \'ds\' },\\n  { title: \'555\', id: \'dgh\' },\\n]\\n\\nconst DragBlock = () => {\\n  const [list, setList] = useState<TListItem[]>(initList)\\n  const onDragEndFn = (dragInfo: DropResult) => {\\n    const startIndex = dragInfo.source.index\\n    const endIndex = dragInfo.destination?.index\\n    const result = Array.from<TListItem>(list)\\n    const [removed] = result.splice(startIndex, 1)\\n    if (endIndex) result.splice(endIndex, 0, removed)\\n    setList(result)\\n  }\\n\\n  const getItem = (item: TListItem) => {\\n    return (\\n      <div\\n        key={item.id}\\n        style={{\\n          padding: \'11px 15px\',\\n          background: \'#bac1e3\',\\n          borderRadius: \'3px\',\\n        }}\\n      >\\n        {item.title}\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <DragDropContextCom onDragEndFn={onDragEndFn}>\\n      <DroppableCom data={list} getItem={getItem} droppableWrapperId=\\"contentId\\" />\\n    </DragDropContextCom>\\n  )\\n}\\n\\nexport default DragBlock\\n"}},"dropdown":{"title":"Dropdown \u4e0b\u62c9\u83dc\u5355","template":"create-react-app","dependencies":{"@ant-design/icons":"4.7.0","@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/dropdown.tsx":"import React, { FC } from \'react\'\\nimport styled from \'styled-components\'\\n\\nexport interface DropdownProps {\\n  menu: { key: string | number; label: React.ReactNode }[]\\n  children?: React.ReactNode | string\\n  style?: React.CSSProperties\\n}\\n\\nconst DefaultTriggerNode = () => <DefaultTriggerWrapper>Hover me</DefaultTriggerWrapper>\\n\\nconst Dropdown: FC<DropdownProps> = ({ children, menu = [], style }) => {\\n  return (\\n    <DropdownWrapper style={style}>\\n      <div className=\\"triggerWrapper\\">{children || <DefaultTriggerNode />}</div>\\n      <div className=\\"contentWrapper\\">\\n        <div className=\\"menuWrapper\\">\\n          {menu.map((item) => {\\n            return (\\n              <div className=\\"menuItem\\" key={item.key}>\\n                {item.label}\\n              </div>\\n            )\\n          })}\\n        </div>\\n      </div>\\n    </DropdownWrapper>\\n  )\\n}\\n\\nconst DefaultTriggerWrapper = styled.div`\\n  font-size: 0;\\n  margin-left: 10px;\\n`\\n\\nconst DropdownWrapper = styled.div`\\n  position: relative;\\n  display: inline-block;\\n  &:hover > div:nth-child(2) {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n  .contentWrapper {\\n    position: absolute;\\n    top: 100%;\\n    left: 0;\\n    z-index: 2;\\n    transform-origin: 0 0;\\n    transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n    transform: scale(0);\\n    opacity: 0;\\n    width: max-content;\\n    .menuWrapper {\\n      margin-top: 5px;\\n      background: #fff;\\n      box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\\n      border-radius: 8px;\\n    }\\n  }\\n`\\nexport const MenuItemWrapper = styled.div`\\n  background: #ffffff;\\n  border-radius: 10px;\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n  transition: all linear 0.2s;\\n  padding: 8px 11px 8px 9px;\\n  &:hover {\\n    background: #73d37b;\\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\\n  }\\n`\\nexport const MenuItemText = styled.div`\\n  font-style: normal;\\n  font-weight: 400;\\n  font-size: 14px;\\n  text-transform: capitalize;\\n  color: #252525;\\n`\\nexport default Dropdown\\n","demo.tsx":"import Dropdown, { MenuItemWrapper, MenuItemText } from \'./components/dropdown\'\\nimport { CopyOutlined, EyeOutlined } from \'@ant-design/icons\'\\nconst Demo = () => {\\n  const onCopy = () => {}\\n  const onViewENS = () => {}\\n  return (\\n    <>\\n      <Dropdown\\n        menu={[\\n          {\\n            key: \'copy\',\\n            label: (\\n              <MenuItemWrapper onClick={onCopy}>\\n                <CopyOutlined />\\n                <MenuItemText style={{ marginLeft: 5 }}>Copy share link</MenuItemText>\\n              </MenuItemWrapper>\\n            ),\\n          },\\n          {\\n            key: \'viewExternalLink\',\\n            label: (\\n              <MenuItemWrapper onClick={onViewENS}>\\n                <EyeOutlined />\\n                <MenuItemText style={{ marginLeft: 5 }}>View on ENS</MenuItemText>\\n              </MenuItemWrapper>\\n            ),\\n          },\\n        ]}\\n      >\\n        Hover me\\n      </Dropdown>\\n    </>\\n  )\\n}\\nexport default Demo\\n"}},"highlightCode":{"title":"\u9ad8\u4eae\u4ee3\u7801\u5757","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","prismjs":"1.27.0","react":"18.0.0","react-dom":"18.0.0","@types/prismjs":"1.26.0","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","demo.tsx":"import { useEffect, useState } from \'react\'\\nimport \'./highlight.css\'\\nimport { highlight, languages } from \'prismjs/components/prism-core\'\\nimport \'prismjs/components/prism-clike\'\\nimport \'prismjs/components/prism-markup\'\\nimport \'prismjs/components/prism-javascript\'\\nimport \'prismjs/components/prism-jsx\'\\nimport \'prismjs/components/prism-typescript.js\'\\nimport \'prismjs/components/prism-tsx.js\'\\n\\nconst jsxCode = `import React from \'react\';\\nimport { Checkbox } from \'antd\';\\nimport type { CheckboxChangeEvent } from \'antd/es/checkbox\';\\n\\nconst onChange = (e: CheckboxChangeEvent) => {\\n  console.log(e.target.checked);\\n};\\n\\nconst App: React.FC = () => <Checkbox onChange={onChange}>Checkbox</Checkbox>;\\n\\nexport default App;`\\n\\nconst HighlightCode = () => {\\n  const [highlightCodes, setHighlightCodes] = useState<string>(\'\')\\n  const getHighlightCode = () => {\\n    const res = highlight(jsxCode, languages.tsx, \'tsx\')\\n    setHighlightCodes(res)\\n  }\\n  useEffect(() => {\\n    getHighlightCode()\\n  }, [])\\n  return (\\n    <div>\\n      <pre className=\\"language-jsx\\">\\n        <code dangerouslySetInnerHTML={{ __html: highlightCodes }} />\\n      </pre>\\n    </div>\\n  )\\n}\\n\\nexport default HighlightCode\\n","highlight.css":"pre,\\ncode {\\n  color: black;\\n  font-family: \'Lucida Console\', Consolas, Monaco, \'Andale Mono\', \'Ubuntu Mono\', monospace;\\n  line-height: 2;\\n  direction: ltr;\\n\\n  white-space: pre;\\n  text-align: left;\\n  word-wrap: normal;\\n  word-break: normal;\\n  word-spacing: normal;\\n  tab-size: 4;\\n  hyphens: none;\\n  background: #f8f8f8 !important;\\n  font-size: 12px !important;\\n}\\npre {\\n  padding: 12px 22px;\\n  border-radius: 3px;\\n  border: 1px solid #f1e9e9;\\n}\\nblockquote {\\n  color: #666;\\n  border-left: 5px solid #cbcbcb;\\n  background-color: #f8f8f8;\\n  font-size: 1em;\\n  padding: 0 13px;\\n}\\nblockquote p {\\n  padding: 8px 0;\\n}\\n\\n/*\u9ad8\u4eae\u4ee3\u7801start*/\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n  color: slategray;\\n}\\n\\n.token.punctuation {\\n  color: #999;\\n}\\n\\n.namespace {\\n  opacity: 0.7;\\n}\\n\\n.token.property,\\n.token.tag,\\n.token.boolean,\\n.token.number,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n  color: #f81d22;\\n}\\n\\n.token.selector,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin,\\n.token.inserted {\\n  color: #0b8235;\\n}\\n\\n.token.operator,\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n  color: #0b8235;\\n}\\n\\n.token.atrule,\\n.token.attr-value,\\n.token.keyword {\\n  color: #008dff;\\n}\\n\\n.token.function {\\n  color: #f81d22;\\n}\\n\\n.token.regex,\\n.token.important,\\n.token.variable {\\n  color: #e90;\\n}\\n\\n.token.important,\\n.token.bold {\\n  font-weight: bold;\\n}\\n\\n.token.italic {\\n  font-style: italic;\\n}\\n\\n.token.entity {\\n  cursor: help;\\n}\\n/*\u9ad8\u4eae\u4ee3\u7801start*/\\n"}},"loadingImage":{"title":"\u56fe\u7247\u6b63\u5728\u52a0\u8f7d\u4e2d","template":"create-react-app","dependencies":{"@ant-design/icons":"4.7.0","@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/loadingImage.tsx":"import { useEffect, FC, useState, ReactNode, CSSProperties } from \'react\'\\nimport styled from \'styled-components\'\\nimport { LoadingOutlined } from \'@ant-design/icons\'\\n\\ntype TLoadingImageProps = {\\n  src: string\\n  style?: CSSProperties\\n  errorImg?: string\\n  children?: ReactNode\\n}\\nconst defaultErrorImg =\\n  \'https://img.freepik.com/free-vector/oops-404-error-with-broken-robot-concept-illustration_114360-5529.jpg?w=826&t=st=1673252592~exp=1673253192~hmac=86553ee3acf8c0d791425690e0d0489f5af81a25d09a17aee5b15539bd53d9fb\'\\nconst LoadingImage: FC<TLoadingImageProps> = (props) => {\\n  const [src, setSrc] = useState(\'\')\\n  const [isFlag, setIsFlag] = useState(false)\\n  const loadImg = () => {\\n    if (isFlag) return\\n    const imgDom = new Image()\\n    imgDom.src = props.src\\n    imgDom.onload = function () {\\n      setIsFlag(true)\\n      setSrc(props.src)\\n    }\\n    imgDom.onerror = function () {\\n      setIsFlag(true)\\n      setSrc((props.errorImg as string) || defaultErrorImg)\\n    }\\n  }\\n  useEffect(() => {\\n    loadImg()\\n  }, [props.src])\\n  return (\\n    <ImageWrapper background={src} style={props.style}>\\n      {!isFlag && (\\n        <div className=\\"loaderWrapper\\">\\n          <LoadingOutlined />\\n        </div>\\n      )}\\n      {props.children}\\n    </ImageWrapper>\\n  )\\n}\\nconst ImageWrapper = styled.div<{ background: string }>`\\n  width: 260px;\\n  height: 260px;\\n  background: ${({ background }) => `url(${background}) no-repeat top / cover`};\\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.1);\\n  border-radius: 14px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  .loaderWrapper {\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-size: 25px;\\n  }\\n`\\nexport default LoadingImage\\n","demo.tsx":"import styled from \'styled-components\'\\nimport LoadingImage from \'./components/loadingImage\'\\nconst Demo = () => {\\n  return (\\n    <DemoWrapper>\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x46d853692b065ec4133f2b09358b7d5e041647387e34e77d88701d88e791df24/image\\" />\\n      <LoadingImage src=\\"https://meta.image.space.id/image/mainnet/12059547966807490816228010420051176187045361161507704345209897480251462207257.svg\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\" />\\n      <LoadingImage src=\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\" />\\n      <LoadingImage src=\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\" />\\n      <LoadingImage src=\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0xab0d340a4fbc77f95abf402bbc9ae12f2f628d4ecc760ad32afbd468071d3188/image\\" />\\n    </DemoWrapper>\\n  )\\n}\\nconst DemoWrapper = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, 260px);\\n  grid-gap: 10px;\\n  justify-content: space-between;\\n`\\nexport default Demo\\n"}},"md2html":{"title":"md\u8f6chtml\u4ee3\u7801\u5757","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","marked":"4.0.12","react":"18.0.0","react-dom":"18.0.0","@types/marked":"4.0.8","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","demo.tsx":"import React, { useState } from \'react\'\\nimport \'./index.css\'\\nimport { marked } from \'marked\'\\n\\nconst Md2Html = () => {\\n  const [html, setHtml] = useState<string>(\'\')\\n  const md2html = (mdData: string) => {\\n    return marked(mdData, {\\n      renderer: new marked.Renderer(),\\n      gfm: true,\\n      breaks: false,\\n    })\\n  }\\n  const onTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\\n    setHtml(md2html(e.target.value))\\n  }\\n  return (\\n    <div className=\\"md2html\\">\\n      <div className=\\"left block\\">\\n        <textarea name=\\"\\" id=\\"textarea\\" onChange={onTextareaChange} placeholder=\\"\u8bf7\u8f93\u5165md\\" />\\n      </div>\\n      <div className=\\"right block\\" dangerouslySetInnerHTML={{ __html: html }} />\\n    </div>\\n  )\\n}\\n\\nexport default Md2Html\\n","index.css":".md2html {\\n  display: flex;\\n  width: 100%;\\n}\\n.block {\\n  width: 50%;\\n  height: 600px;\\n  padding: 10px 15px 0;\\n  border-radius: 3px;\\n  border: 1px solid rgba(0, 0, 0, 0.06);\\n}\\n.left {\\n  background: #292d3e;\\n  position: relative;\\n}\\n.right {\\n  overflow: scroll;\\n  margin-left: 12px;\\n}\\n#textarea {\\n  width: 100%;\\n  display: block;\\n  resize: none;\\n  height: 100%;\\n  outline: none;\\n  border: none;\\n  background: #292d3e;\\n  color: #fff;\\n  padding: 0;\\n}\\nblockquote {\\n  margin: 0;\\n}\\n"}},"popover":{"title":"Popover \u6c14\u6ce1\u5361\u7247","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/popover.tsx":"import styled from \'styled-components\'\\nimport { FC, ReactNode } from \'react\'\\n\\nexport interface PopoverProps {\\n  content: ReactNode\\n  children: ReactNode\\n}\\n\\nconst Popover: FC<PopoverProps> = ({ content, children }) => {\\n  return (\\n    <PopoverWrapper>\\n      <TriggerWrapper>{children}</TriggerWrapper>\\n      <ContentWrapper>\\n        <Content>{content}</Content>\\n      </ContentWrapper>\\n    </PopoverWrapper>\\n  )\\n}\\n\\nconst TriggerWrapper = styled.div`\\n  display: flex;\\n  align-items: center;\\n`\\n\\nconst PopoverWrapper = styled.div`\\n  position: relative;\\n  &:hover > div:nth-child(2) {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n`\\nconst ContentWrapper = styled.div`\\n  position: absolute;\\n  top: 100%;\\n  left: 0;\\n  z-index: 2;\\n  transform-origin: 0 0;\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  transform: scale(0);\\n  opacity: 0;\\n`\\nconst Content = styled.div`\\n  position: relative;\\n  margin-top: 9px;\\n  padding: 13px 23px 13px 15px;\\n  background: #fff;\\n  box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\\n  border-radius: 8px;\\n  &:after {\\n    content: \'\';\\n    position: absolute;\\n    z-index: 2;\\n    left: 14px;\\n    top: 0;\\n    width: 13px;\\n    height: 13px;\\n    background: #fff;\\n    border-radius: 2px;\\n    transform: rotate(45deg) translateY(-50%);\\n  }\\n`\\nexport default Popover\\n","demo.tsx":"import Popover from \'./components/popover\'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Popover\\n        content={\\n          <>\\n            <div>Content1Content1Content1</div>\\n            <div>Content2Content2Content2</div>\\n            <div>Content3Content3Content3</div>\\n            <div>Content4Content4Content4</div>\\n            <div>Content5Content5Content5</div>\\n          </>\\n        }\\n      >\\n        Hover me\\n      </Popover>\\n    </>\\n  )\\n}\\nexport default Demo\\n"}},"table":{"title":"Table \u8868\u683c","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/Sortable.tsx":"import { CSSProperties, useEffect, useRef } from \'react\'\\nimport styled from \'styled-components\'\\n\\nexport enum Sort {\\n  DEFAULT,\\n  DESC,\\n  ASC,\\n}\\nexport default function Sortable(props: {\\n  value: Sort\\n  onChange: (sort: Sort) => void\\n  className?: string\\n  style?: CSSProperties\\n}) {\\n  const ref = useRef<HTMLSpanElement>(null)\\n  useEffect(() => {\\n    const el = ref.current?.parentElement\\n    if (el) {\\n      const clickHandler = () => {\\n        props.onChange(props.value === Sort.DEFAULT ? Sort.DESC : props.value === Sort.DESC ? Sort.ASC : Sort.DEFAULT)\\n      }\\n      el.addEventListener(\'click\', clickHandler)\\n      return () => {\\n        el.removeEventListener(\'click\', clickHandler)\\n      }\\n    }\\n  }, [props.value])\\n  return (\\n    <SortableWrapper ref={ref} className={props.className} style={props.style}>\\n      <Triangle src={props.value === Sort.ASC ? \'Images.TABLE.UP_ACTIVE_SVG\' : \'Images.TABLE.UP_SVG\'} />\\n      <Triangle src={props.value === Sort.DESC ? \'Images.TABLE.DOWN_ACTIVE_SVG\' : \'Images.TABLE.DOWN_SVG\'} />\\n    </SortableWrapper>\\n  )\\n}\\n\\nconst SortableWrapper = styled.span`\\n  height: 14px;\\n  width: 7px;\\n  cursor: pointer;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  flex-direction: column;\\n  margin-left: 4px;\\n`\\n\\nconst Triangle = styled.img`\\n  width: 7px;\\n  height: 7px;\\n`\\n","components/Table.tsx":"import { CSSProperties } from \'react\'\\nimport styled, { css } from \'styled-components\'\\nimport Sortable, { Sort } from \'./Sortable\'\\n\\nexport type TableAlign = \'left\' | \'center\' | \'right\'\\n\\nexport interface TableColumn<T extends object> {\\n  name: string\\n  headStyle?: CSSProperties\\n  itemStyle?: CSSProperties\\n  key?: keyof T\\n  render?: (data: T, index: number, key?: keyof T) => JSX.Element | string\\n  flex?: number\\n  width?: string\\n  align?: TableAlign\\n  sortable?: boolean\\n  sort?: Sort\\n}\\n\\nexport default function Table<T extends object>(props: {\\n  data: T[]\\n  columns: TableColumn<T>[]\\n  gap?: string\\n  keyName?: keyof T\\n  loading?: boolean\\n  className?: string\\n  style?: CSSProperties\\n  updateColumns?: (columns: TableColumn<T>[]) => void\\n  onRowClick?: (data: T, index: number) => void\\n}) {\\n  return (\\n    <TableWrapper style={props.style} className={props.className}>\\n      <TableHeader className={\'table-header\'} gap={props.gap}>\\n        {props.columns.map((column) => (\\n          <Th\\n            key={column.name}\\n            className={\'table-th\'}\\n            style={column.headStyle}\\n            width={column.width}\\n            flex={column.flex || 1}\\n            clickable={column.sortable}\\n          >\\n            {column.name}{\' \'}\\n            {column.sortable && (\\n              <Sortable\\n                value={column.sort || Sort.DEFAULT}\\n                onChange={(sort: Sort) => {\\n                  const clonedColumns: typeof props.columns = JSON.parse(JSON.stringify(props.columns))\\n                  const target = clonedColumns.find((x) => x.name === column.name)\\n                  if (target) {\\n                    target.sort = sort\\n                    props.updateColumns && props.updateColumns(clonedColumns)\\n                  }\\n                }}\\n              />\\n            )}\\n          </Th>\\n        ))}\\n      </TableHeader>\\n      <TableBody className={\'table-body\'}>\\n        {props.data.map((d, index) => (\\n          <TableRow\\n            onClick={() => props.onRowClick && props.onRowClick(d, index)}\\n            key={props.keyName ? (d[props.keyName] as any as string) : index}\\n            className={\'table-row\'}\\n            gap={props.gap}\\n            clickable={!!props.onRowClick}\\n          >\\n            {props.columns.map((column) => {\\n              let renderResult = column.render\\n                ? column.render(d, index, column.key)\\n                : column.key\\n                ? (d[column.key] as any as string)\\n                : column.key\\n              // @ts-ignore\\n              if ([undefined, \'\', null].includes(renderResult)) {\\n                renderResult = \'-\'\\n              }\\n\\n              return (\\n                <Td\\n                  key={column.name}\\n                  style={column.itemStyle}\\n                  className={\'table-td\'}\\n                  flex={column.flex || 1}\\n                  width={column.width}\\n                  align={column.align}\\n                >\\n                  {/*//@ts-ignore*/}\\n                  {renderResult}\\n                </Td>\\n              )\\n            })}\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </TableWrapper>\\n  )\\n}\\n\\nconst TableWrapper = styled.div`\\n  width: 100%;\\n  position: relative;\\n`\\nconst TableHeader = styled.div<{ gap?: string }>`\\n  height: 50px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  position: relative;\\n  border-radius: 5px;\\n  background: #f6f6f6;\\n  & > :first-child {\\n    margin-left: 0;\\n  }\\n  & > * {\\n    margin-left: ${({ gap }) => gap || 0};\\n  }\\n`\\n\\nconst Th = styled.span<{ width?: string; flex?: number; clickable?: boolean }>`\\n  user-select: none;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n  ${({ width }) =>\\n    width\\n      ? css`\\n          width: ${width};\\n        `\\n      : \'\'};\\n  ${({ flex, width }) =>\\n    !width && flex\\n      ? css`\\n          flex: ${flex};\\n        `\\n      : \'\'};\\n  font-size: 14px;\\n  color: #9f9f9f;\\n  text-align: center;\\n  cursor: ${(props) => (props.clickable ? \'pointer\' : \'inherit\')};\\n`\\nconst TableBody = styled.ul`\\n  width: 100%;\\n  position: relative;\\n  padding: 0;\\n`\\n\\nconst TableRow = styled.li<{ gap?: string; clickable?: boolean }>`\\n  height: 50px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  position: relative;\\n  cursor: ${(props) => {\\n    return !!props.clickable ? \'pointer\' : \'inherit\'\\n  }};\\n  & > :first-child {\\n    margin-left: 0;\\n  }\\n  & > * {\\n    margin-left: ${({ gap }) => gap || 0};\\n  }\\n  border-radius: 5px;\\n  transition: all 0.15s linear;\\n  &:hover {\\n    box-shadow: 0px 4px 10px rgba(114, 175, 120, 0.1);\\n  }\\n  border-bottom: solid 1px #e2e2e2;\\n`\\nconst Td = styled.div<{ width?: string; flex?: number; align?: TableAlign }>`\\n  height: 100%;\\n  ${({ width }) =>\\n    width\\n      ? css`\\n          width: ${width};\\n        `\\n      : \'\'};\\n  ${({ flex, width }) =>\\n    !width && flex\\n      ? css`\\n          flex: ${flex};\\n        `\\n      : \'\'};\\n  font-size: 14px;\\n  color: #737373;\\n  line-height: 50px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: ${({ align }) => (align === \'left\' ? \'flex-start\' : align === \'right\' ? \'flex-end\' : \'center\')};\\n  position: relative;\\n`\\n","demo.tsx":"import Table, { TableColumn } from \'./components/Table\'\\n\\ntype TListItem = {\\n  price: number\\n  price_usd: number\\n  expiration: string\\n  from: string\\n}\\nconst columns: TableColumn<TListItem>[] = [\\n  {\\n    name: \'Price\',\\n    sortable: false,\\n    key: \'price\',\\n  },\\n  {\\n    name: \'USD Price\',\\n    sortable: false,\\n    key: \'price_usd\',\\n    render: (data) => (data.price_usd ? `\xa5${data.price_usd}` : \'-\'),\\n  },\\n  {\\n    name: \'Expiration\',\\n    sortable: false,\\n    key: \'expiration\',\\n  },\\n  {\\n    name: \'From\',\\n    sortable: false,\\n    key: \'from\',\\n  },\\n]\\nconst Demo = () => {\\n  const tableData: TListItem[] = [\\n    { price: 23423, price_usd: 123123, expiration: \'2022-09-15 18:36:28\', from: \'\u56db\u5ddd\u7701\u6210\u90fd\u5e02\' },\\n    { price: 23423, price_usd: 123123, expiration: \'2022-09-15 18:36:28\', from: \'\u56db\u5ddd\u7701\u6210\u90fd\u5e02\' },\\n    { price: 23423, price_usd: 123123, expiration: \'2022-09-15 18:36:28\', from: \'\u56db\u5ddd\u7701\u6210\u90fd\u5e02\' },\\n    { price: 23423, price_usd: 123123, expiration: \'2022-09-15 18:36:28\', from: \'\u56db\u5ddd\u7701\u6210\u90fd\u5e02\' },\\n  ]\\n  return (\\n    <>\\n      <Table data={tableData} columns={columns} />\\n    </>\\n  )\\n}\\nexport default Demo\\n"}},"tabs":{"title":"Tabs \u6807\u7b7e\u9875","template":"create-react-app","dependencies":{"@types/react":"18.0.26","@types/react-dom":"18.0.10","react":"18.0.0","react-dom":"18.0.0","styled-components":"5.3.6","@types/styled-components":"5.1.26","prop-types":"latest"},"files":{"index.tsx":"import React from \'react\';\\nimport { createRoot } from \'react-dom/client\';\\nimport Demo from \'./demo\';\\n\\ncreateRoot(document.getElementById(\'root\')).render(<Demo />);","index.html":"<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1, shrink-to-fit=no\\">\\n    <meta name=\\"theme-color\\" content=\\"#000000\\">\\n  </head>\\n  <body>\\n    <div id=\\"root\\" style=\\"padding: 24px\\" />\\n  </body>\\n</html>","tsconfig.json":"\\n    {\\n      \\"compilerOptions\\": {\\n        \\"jsx\\": \\"react-jsx\\",\\n        \\"target\\": \\"esnext\\",\\n        \\"module\\": \\"esnext\\",\\n        \\"esModuleInterop\\": true,\\n        \\"moduleResolution\\": \\"node\\",\\n      }\\n    }\\n  ","components/tabs.tsx":"import styled from \'styled-components\'\\nimport React, { useState, useEffect, FC, memo } from \'react\'\\n\\nexport interface TabsItemProps {\\n  key: React.Key\\n  label: React.ReactNode | string\\n  children: React.ReactNode | string\\n}\\n\\nexport type tabsHeaderProps = Omit<TabsItemProps, \'children\'>\\n\\ninterface TabsProps {\\n  items: TabsItemProps[]\\n  defaultTab?: string | number\\n  onChange?: (val: tabsHeaderProps) => void\\n}\\n\\nconst Tabs: FC<TabsProps> = ({ items, onChange, defaultTab }) => {\\n  const [hadRenderTabPane, setHadRenderTabPane] = useState<(string | number)[]>(\\n    defaultTab ? [defaultTab] : [items[0].key]\\n  )\\n  const [checkedId, setCheckedId] = useState<string | number>(defaultTab || items[0].key)\\n  const [offsetLeft, setOffsetLeft] = useState(0)\\n  const [offsetWidth, setOffsetWidth] = useState(0)\\n\\n  const tabsHeaderData: tabsHeaderProps[] = items.map((item) => {\\n    return { key: item.key, label: item.label }\\n  })\\n\\n  const getDefaultActiveKey = () => {\\n    const activeKey = items[0]?.key\\n    setCheckedId(activeKey)\\n    return activeKey\\n  }\\n\\n  const handleClick = (data: tabsHeaderProps, e: React.MouseEvent<HTMLDivElement>) => {\\n    setHadRenderTabPane([...hadRenderTabPane, data.key])\\n    setOffsetLeft((e.target as HTMLDivElement).offsetLeft)\\n    setOffsetWidth((e.target as HTMLDivElement).offsetWidth)\\n    setCheckedId(data.key)\\n    onChange && onChange(data)\\n  }\\n\\n  useEffect(() => {\\n    !defaultTab && getDefaultActiveKey()\\n  }, [items])\\n  useEffect(() => {\\n    if (defaultTab) {\\n      setCheckedId(defaultTab)\\n      setHadRenderTabPane([...hadRenderTabPane, defaultTab])\\n    }\\n  }, [defaultTab])\\n  return (\\n    <>\\n      <TabsContentWrapper>\\n        <TabsWrapper>\\n          {tabsHeaderData.map((item) => {\\n            return (\\n              <TabsItem\\n                isChecked={item.key === checkedId}\\n                key={item.key}\\n                ref={(node) => {\\n                  if (checkedId === item.key) {\\n                    setTimeout(() => {\\n                      const offsetWidth = (node as HTMLDivElement)?.offsetWidth\\n                      const offsetLeft = (node as HTMLDivElement)?.offsetLeft\\n                      if (offsetWidth) {\\n                        setOffsetWidth(offsetWidth)\\n                        setOffsetLeft(offsetLeft)\\n                      }\\n                    }, 100)\\n                  }\\n                }}\\n                onClick={(e) => {\\n                  handleClick(item, e)\\n                }}\\n              >\\n                {item.label}\\n              </TabsItem>\\n            )\\n          })}\\n        </TabsWrapper>\\n        <Line left={offsetLeft} width={offsetWidth} />\\n        {hadRenderTabPane.length > 0 &&\\n          items.map((item) => {\\n            return (\\n              <>\\n                {hadRenderTabPane.includes(item.key) && (\\n                  <div key={item.key} style={{ display: item.key === checkedId ? \'block\' : \'none\' }}>\\n                    {item.children}\\n                  </div>\\n                )}\\n              </>\\n              // <div key={item.key} style={{ display: item.key === checkedId ? \'block\' : \'none\' }}>\\n              //   {item.children}\\n              // </div>\\n            )\\n          })}\\n      </TabsContentWrapper>\\n    </>\\n  )\\n}\\n\\nconst TabsContentWrapper = styled.div`\\n  width: 100%;\\n`\\n\\nconst TabsWrapper = styled.div`\\n  display: flex;\\n  position: relative;\\n`\\n\\nconst TabsItem = styled.div<{ isChecked: boolean }>`\\n  font-style: normal;\\n  font-weight: 400;\\n  font-size: 16px;\\n  line-height: 20px;\\n  text-transform: capitalize;\\n  color: ${({ isChecked }) => (isChecked ? \'#1677ff\' : \'#252525\')};\\n  margin-right: 52px;\\n  cursor: pointer;\\n  transition: all linear 0.15s;\\n  user-select: none;\\n  padding: 0 8px;\\n  display: flex;\\n  align-items: center;\\n  &:hover {\\n    color: #1677ff;\\n  }\\n`\\n\\nconst Line = styled.div<{ left: number; width: number }>`\\n  width: 100%;\\n  height: 1px;\\n  background: #1677ff;\\n  position: relative;\\n  margin-top: 10px;\\n  &::after {\\n    content: \'\';\\n    position: absolute;\\n    width: ${({ width }) => width + \'px\'};\\n    height: 2px;\\n    background: #73d37b;\\n    left: ${({ left }) => left + \'px\'};\\n    top: 0;\\n    transition: all linear 0.15s;\\n  }\\n`\\n\\nexport default memo(Tabs)\\n","demo.tsx":"import Tabs, { TabsItemProps } from \'./components/tabs\'\\nconst Demo = () => {\\n  const tabsData: TabsItemProps[] = [\\n    {\\n      key: \'categories\',\\n      label: \'Top Categories\',\\n      children: (\\n        <div style={{ padding: \'10px 5px\' }}>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: \'sales\',\\n      label: \'Top Sales\',\\n      children: (\\n        <div style={{ padding: \'10px 5px\' }}>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: \'owners\',\\n      label: \'Top Owners\',\\n      children: (\\n        <div style={{ padding: \'10px 5px\' }}>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: \'gainers\',\\n      label: \'Top Gainers\',\\n      children: (\\n        <div style={{ padding: \'10px 5px\' }}>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n        </div>\\n      ),\\n    },\\n  ]\\n  return (\\n    <>\\n      <Tabs\\n        // defaultTab=\'categories\'\\n        items={tabsData}\\n        onChange={(data) => {\\n          console.log(data)\\n        }}\\n      />\\n    </>\\n  )\\n}\\nexport default Demo\\n"}}}'),h=function(n){var e=n.children,t=n.blockName,m=n.codeSandBoxParameter,h=n.allCodes,b=(0,r.useState)(!1),y=(0,o.Z)(b,2),C=y[0],v=y[1],T=(0,r.useRef)(null),k=h.map((function(n){return{label:n.title,key:n.title,children:(0,f.jsxs)("div",{className:"code",children:[(0,f.jsx)(a.Z,{title:"\u590d\u5236",children:(0,f.jsx)(u.CopyToClipboard,{text:n.codes,children:(0,f.jsx)(p.Z,{style:{cursor:"pointer",position:"absolute",right:15,top:12}})})}),(0,f.jsx)(g,{code:n.codes})]})}}));return(0,f.jsx)("div",{className:"template",children:(0,f.jsxs)("div",{className:"templateWrapper",children:[(0,f.jsx)("div",{className:"example",children:e}),(0,f.jsx)(i.Z,{dashed:!0}),(0,f.jsx)("div",{className:"operationWrapper",children:(0,f.jsxs)(s.Z,{style:{display:"flex",alignItems:"center"},children:[(0,f.jsx)(a.Z,{title:"\u5728 CodeSandbox \u4e2d\u6253\u5f00",children:(0,f.jsxs)("form",{className:"code-box-code-action",action:"https://codesandbox.io/api/v1/sandboxes/define",method:"POST",target:"_blank",ref:T,onClick:function(){var n;null===T||void 0===T||null===(n=T.current)||void 0===n||n.submit()},children:[(0,f.jsx)("input",{type:"hidden",name:"parameters",value:m}),(0,f.jsx)(l.Z,{style:{cursor:"pointer"}})]})}),(0,f.jsx)(a.Z,{title:"\u5728 Stackblitz \u4e2d\u6253\u5f00",children:(0,f.jsx)("span",{style:{cursor:"pointer"},onClick:function(){c.Z.openProject(x[t],{newWindow:!0})},children:(0,f.jsx)("span",{role:"img","aria-label":"thunderbolt",className:"anticon anticon-thunderbolt code-box-stackblitz",children:(0,f.jsx)("svg",{viewBox:"64 64 896 896",focusable:"false","data-icon":"thunderbolt",width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true",children:(0,f.jsx)("path",{d:"M848 359.3H627.7L825.8 109c4.1-5.3.4-13-6.3-13H436c-2.8 0-5.5 1.5-6.9 4L170 547.5c-3.1 5.3.7 12 6.9 12h174.4l-89.4 357.6c-1.9 7.8 7.5 13.3 13.3 7.7L853.5 373c5.2-4.9 1.7-13.7-5.5-13.7zM378.2 732.5l60.3-241H281.1l189.6-327.4h224.6L487 427.4h211L378.2 732.5z"})})})})}),(0,f.jsx)(a.Z,{placement:"top",title:C?"\u6536\u8d77\u4ee3\u7801":"\u663e\u793a\u4ee3\u7801",children:(0,f.jsx)("img",{style:{cursor:"pointer"},onClick:function(){return v(!C)},alt:"expand code",src:"https://gw.alipayobjects.com/zos/antfincdn/Z5c7kzvi30/expand.svg",className:"code-expand-icon-show"})})]})}),C&&(0,f.jsxs)("div",{className:"codes",children:[(0,f.jsx)(i.Z,{dashed:!0}),(0,f.jsx)(d.Z,{defaultActiveKey:"demo.tsx",type:"card",tabPosition:"left",items:k})]})]})})}},4025:function(n){n.exports=JSON.parse("{\"In\":[{\"title\":\"card.tsx\",\"codes\":\"import React, { FC } from 'react'\\nimport styled from 'styled-components'\\n\\ntype CardTemplateProps = {\\n  background?: string\\n  header: React.ReactNode\\n  bottom: React.ReactNode\\n}\\nconst defaultBackground = 'linear-gradient(170.12deg, #6b95f5 -3.26%, #2cd6d6 45.41%, #47b8f1 96.76%)'\\nconst CardTemplate: FC<CardTemplateProps> = ({ background = defaultBackground, header, bottom }) => {\\n  return (\\n    <CardWrapper background={background}>\\n      <div className=\\\"cardHeaderWrapper\\\">{header}</div>\\n      <div className=\\\"cardBottomWrapper\\\">{bottom}</div>\\n    </CardWrapper>\\n  )\\n}\\n\\nconst CardWrapper = styled.div<{ background: string }>`\\n  width: 206px;\\n  height: 225px;\\n  background: ${({ background }) => background};\\n  box-shadow: 0 4px 10px rgba(39, 39, 39, 0.15);\\n  border-radius: 14px;\\n  padding-top: 13px;\\n  display: flex;\\n  justify-content: space-between;\\n  flex-direction: column;\\n  transition: all linear 0.2s;\\n  :hover {\\n    transform: translateY(-2px);\\n  }\\n  &:hover {\\n    box-shadow: 0 4px 15px rgba(94, 212, 151, 0.25);\\n  }\\n`\\n\\nexport default CardTemplate\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport CardTemplate from './card'\\n\\nconst CardBottom = () => {\\n  return (\\n    <CardBottomWrapper>\\n      <span className=\\\"domainName\\\">yitjhy.bnb</span>\\n      <div className=\\\"cardBottomWrapper\\\">\\n        <DescriptionInfoWrapper>\\n          <span className=\\\"descriptionText\\\">Owners</span>\\n          <span className=\\\"descriptionText\\\">0x88cF...f5b5</span>\\n        </DescriptionInfoWrapper>\\n        <OtherDescriptionInfoWrapper>\\n          <span className=\\\"descriptionText\\\">Expires</span>\\n          <span className=\\\"descriptionText\\\">2023.11.30</span>\\n        </OtherDescriptionInfoWrapper>\\n      </div>\\n    </CardBottomWrapper>\\n  )\\n}\\n\\nconst Demo = () => {\\n  return (\\n    <CardListWrapper>\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n      <CardTemplate\\n        header={<div style={{ marginLeft: '13px', fontSize: 25, color: '#fff' }}>Card</div>}\\n        bottom={<CardBottom />}\\n      />\\n    </CardListWrapper>\\n  )\\n}\\nconst CardListWrapper = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, 206px);\\n  grid-gap: 10px;\\n  justify-content: space-between;\\n`\\nconst CardBottomWrapper = styled.div`\\n  .domainName {\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 28px;\\n    color: #ffffff;\\n    text-shadow: 0 4px 4px rgba(0, 0, 0, 0.15);\\n    margin-left: 13px;\\n    margin-bottom: 7px;\\n  }\\n  .cardBottomWrapper {\\n    background: #f8f8f8;\\n    border-radius: 13px;\\n    padding: 17px 14px 16px 20px;\\n    margin-top: 7px;\\n  }\\n`\\nconst DescriptionInfoWrapper = styled.div`\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  .descriptionText {\\n    font-style: normal;\\n    font-weight: 400;\\n    font-size: 12px;\\n    color: #9f9f9f;\\n  }\\n`\\nconst OtherDescriptionInfoWrapper = styled(DescriptionInfoWrapper)`\\n  margin-top: 19px;\\n`\\nexport default Demo\\n\"}],\"wo\":[{\"title\":\"components/collapse.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport React, { useState, useLayoutEffect, useRef, FC } from 'react'\\nimport Header from './Header'\\nimport { useSize } from 'ahooks'\\n\\ntype TCollapseProps = {\\n  title: string\\n  children: React.ReactNode | string\\n  operation?: React.ReactNode | string\\n  onClick?: () => void\\n  showOperation?: boolean\\n  isForceExpand?: boolean\\n  maxHeight?: number\\n}\\n\\nconst Collapse: FC<TCollapseProps> = ({\\n  title,\\n  children,\\n  onClick,\\n  operation,\\n  showOperation = true,\\n  isForceExpand = true,\\n  maxHeight = 350,\\n}) => {\\n  const ref = useRef(null)\\n  const [isExpand, setIsExpand] = useState(true)\\n  const [globalIsExpand, setGlobalIsExpand] = useState(true)\\n  const [offsetHeight, setOffsetHeight] = useState<number | undefined>()\\n  const size = useSize(ref)\\n  const handleClickHeader = () => {\\n    setGlobalIsExpand(false)\\n    isForceExpand && setIsExpand(!isExpand)\\n    onClick && onClick()\\n  }\\n\\n  useLayoutEffect(() => {\\n    if (globalIsExpand && size) {\\n      setOffsetHeight(size?.height)\\n    }\\n  }, [size])\\n  if (!children) {\\n    return <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\\n  }\\n  return (\\n    <div>\\n      <Header title={title} showOperation={showOperation} onClick={handleClickHeader} operation={operation} />\\n      <ContentWrapper isExpand={isExpand} height={offsetHeight} maxHeight={maxHeight} ref={ref}>\\n        {children}\\n      </ContentWrapper>\\n    </div>\\n  )\\n}\\n\\nconst ContentWrapper = styled.div<{ isExpand: boolean; height: number | undefined; maxHeight: number }>`\\n  max-height: ${({ maxHeight }) => `${maxHeight}px`};\\n  padding-top: 16px;\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  transform-origin: 50% 0;\\n  height: ${({ isExpand, height }) => (isExpand ? `${height}px` : 0)};\\n  opacity: ${({ isExpand }) => (isExpand ? 1 : 0)};\\n  overflow: ${({ height, maxHeight }) => (Number(height) < maxHeight ? 'hidden' : 'auto')};\\n  transform: ${({ isExpand }) => (isExpand ? 'scaleY(1)' : 'scaleY(0)')};\\n`\\n\\nexport default Collapse\\n\"},{\"title\":\"components/Header.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport React, { useState, memo, FC } from 'react'\\n\\ninterface HeaderProps {\\n  title: string\\n  showOperation: boolean\\n  onClick?: Function\\n  className?: string\\n  operation?: React.ReactNode | string\\n}\\n\\nconst DefaultOperation: FC<{ isExpand: boolean }> = ({ isExpand }) => (\\n  <HeaderArrowIcon isExpand={isExpand}>&#9650;</HeaderArrowIcon>\\n)\\n\\nconst Header: FC<HeaderProps> = ({ title, onClick, showOperation = true, className, operation }) => {\\n  const [isExpand, setIsExpand] = useState<boolean>(false)\\n  const handleClickHeader = () => {\\n    setIsExpand(!isExpand)\\n    onClick && onClick()\\n  }\\n  return (\\n    <>\\n      <HeaderWrapper onClick={handleClickHeader} showOperation={showOperation} className={className}>\\n        <HeaderTitle>{title || 'others'}</HeaderTitle>\\n        {showOperation && (operation || <DefaultOperation isExpand={isExpand} />)}\\n      </HeaderWrapper>\\n    </>\\n  )\\n}\\n\\nconst HeaderWrapper = styled.div<{ showOperation: boolean }>`\\n  //width: 100%;\\n  background: #fafafa;\\n  border-radius: 8px;\\n  padding: 13px 19px 13px 28px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  border: 1px solid #d9d9d9;\\n  cursor: ${({ showOperation }) => (showOperation ? 'pointer' : 'normal')};\\n`\\n\\nconst HeaderTitle = styled.span`\\n  font-weight: 400;\\n  font-size: 18px;\\n  color: #252525;\\n`\\n\\nconst HeaderArrowIcon = styled.div<{ isExpand: boolean }>`\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  user-select: none;\\n  transform: ${({ isExpand }) => (isExpand ? 'rotate(180deg)' : 'rotate(0deg)')};\\n`\\n\\nexport default memo(Header)\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Collapse from './components/collapse'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Collapse title=\\\"This is panel header\\\">\\n        <div>This is panel header</div>\\n        <div style={{ color: '#4f7fdf' }}>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>This is panel header</div>\\n        <div style={{ color: '#4f7fdf' }}>This is panel header</div>\\n        <div>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>This is panel header</div>\\n        <div>13erwt</div>\\n        <div>13erwt</div>\\n        <div style={{ color: '#4f7fdf' }}>\\n          A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome\\n          guest in many households across the world.\\n        </div>\\n        <div>13erwt</div>\\n        <div>13erwt</div>\\n      </Collapse>\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}],\"CE\":[{\"title\":\"demo.tsx\",\"codes\":\"// @ts-nocheck\\nimport React from 'react'\\nimport './index.css'\\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from 'react-contextmenu'\\nimport { WeiboOutlined, QqOutlined, WechatOutlined } from '@ant-design/icons'\\n\\nconst handleClick = () => {}\\n\\nconst MyContextMenu = () => {\\n  return (\\n    <div>\\n      <ContextMenuTrigger id=\\\"same_unique_identifier\\\">\\n        <span className=\\\"well\\\" style={{ color: '#1890ff' }}>\\n          \u53f3\u952e\u70b9\u51fb\\n        </span>\\n      </ContextMenuTrigger>\\n      <ContextMenu id=\\\"same_unique_identifier\\\" className=\\\"contextmenu\\\">\\n        <MenuItem data={{ foo: 'copy' }} onClick={handleClick}>\\n          <div className=\\\"in_wrapper\\\">\\n            <WeiboOutlined style={{ marginRight: '9px' }} />\\n            \u590d\u5236\\n          </div>\\n        </MenuItem>\\n        <MenuItem data={{ foo: 'paste' }} onClick={handleClick}>\\n          <div className=\\\"in_wrapper\\\">\\n            <QqOutlined style={{ marginRight: '9px' }} />\\n            \u7c98\u8d34\\n          </div>\\n        </MenuItem>\\n        <MenuItem divider />\\n        <MenuItem data={{ foo: 'cut' }} onClick={handleClick}>\\n          <div className=\\\"in_wrapper\\\">\\n            <WechatOutlined style={{ marginRight: '9px' }} />\\n            \u526a\u5207\\n          </div>\\n        </MenuItem>\\n      </ContextMenu>\\n    </div>\\n  )\\n}\\n\\nexport default MyContextMenu\\n\"},{\"title\":\"index.css\",\"codes\":\".contextmenu {\\n  background: #e1e2e2;\\n  width: 150px;\\n  padding: 8px;\\n  border-radius: 6px;\\n  z-index: 5;\\n}\\n.react-contextmenu-item--selected .in_wrapper {\\n  background: #5da0fb;\\n  border-radius: 4px;\\n  color: #fff;\\n}\\n.react-contextmenu-item .in_wrapper {\\n  cursor: pointer;\\n  margin-bottom: 4px;\\n  padding: 0 9px;\\n}\\n\"}],\"WL\":[{\"title\":\"components/description.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport React from 'react'\\nimport DescriptionItem from './descriptionItem'\\n\\ninterface DescriptionsProps {\\n  children: React.ReactNode\\n  column?: number\\n  style?: React.CSSProperties\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\n\\ninterface DescriptionsContextProps {\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\n\\nconst defaultColumn = 3\\nexport const DescriptionsContext = React.createContext<DescriptionsContextProps>({})\\n\\nfunction Description({ children, style, column = defaultColumn, labelStyle, contentStyle }: DescriptionsProps) {\\n  const contextValue = React.useMemo(() => ({ labelStyle, contentStyle }), [labelStyle, contentStyle])\\n  return (\\n    <DescriptionsContext.Provider value={contextValue}>\\n      <DescriptionWrapper style={style} column={column}>\\n        {children}\\n      </DescriptionWrapper>\\n    </DescriptionsContext.Provider>\\n  )\\n}\\n\\nconst DescriptionWrapper = styled.span<{ column: number }>`\\n  display: grid;\\n  grid-template-columns: ${({ column }) => `repeat(${column}, auto)`};\\n  grid-gap: 13px 0;\\n`\\nDescription.Item = DescriptionItem\\nexport default Description\\n\"},{\"title\":\"components/descriptionItem.tsx\",\"codes\":\"import React, { FC, useContext } from 'react'\\nimport styled from 'styled-components'\\nimport { DescriptionsContext } from './description'\\n\\ntype TDescriptionItemProps = {\\n  label: React.ReactNode\\n  children: React.ReactNode\\n  labelWidth?: number\\n  style?: React.CSSProperties\\n  labelStyle?: React.CSSProperties\\n  contentStyle?: React.CSSProperties\\n}\\nconst DescriptionItem: FC<TDescriptionItemProps> = ({\\n  label,\\n  children,\\n  labelWidth,\\n  style,\\n  labelStyle,\\n  contentStyle,\\n}) => {\\n  const { labelStyle: labelStyleFromContext, contentStyle: contentStyleFromContext } = useContext(DescriptionsContext)\\n  return (\\n    <DescriptionItemWrapper style={style}>\\n      <DescriptionItemLabel\\n        style={{\\n          ...labelStyleFromContext,\\n          ...labelStyle,\\n          ...(labelWidth ? { width: labelWidth } : {}),\\n        }}\\n      >\\n        {label}\\n      </DescriptionItemLabel>\\n      <DescriptionItemContent style={{ ...contentStyleFromContext, ...contentStyle }}>\\n        {children}\\n      </DescriptionItemContent>\\n    </DescriptionItemWrapper>\\n  )\\n}\\n\\nconst DescriptionItemWrapper = styled.span`\\n  display: flex;\\n  align-items: center;\\n`\\nconst DescriptionItemLabel = styled.span`\\n  font-size: 12px;\\n  color: #9f9f9f;\\n  text-transform: capitalize;\\n  &:after {\\n    content: ':';\\n    margin-left: 2px;\\n  }\\n`\\nconst DescriptionItemContent = styled.span`\\n  display: flex;\\n  align-items: center;\\n  font-size: 14px;\\n  color: #252525;\\n  margin-left: 8px;\\n`\\nexport default DescriptionItem\\n\"},{\"title\":\"components/index.ts\",\"codes\":\"import Description from './description'\\nimport DescriptionItem from './descriptionItem'\\n\\nexport { Description, DescriptionItem }\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Description from './components/description'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Description>\\n        <Description.Item label=\\\"Create Date\\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\\"Expiration Date\\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\\"Token Id\\\">0x42d4aE34624F7</Description.Item>\\n        <Description.Item label=\\\"Create Date\\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\\"Expiration Date\\\">2022-06-28 18:56:37</Description.Item>\\n        <Description.Item label=\\\"Token Id\\\">0x42d4aE34624F713D9</Description.Item>\\n      </Description>\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}],\"oh\":[{\"title\":\"components/index.tsx\",\"codes\":\"import { FC, ReactNode } from 'react'\\nimport { DragDropContext, Draggable, Droppable, OnDragEndResponder, DropResult } from 'react-beautiful-dnd'\\nimport styled from '@emotion/styled'\\n\\nconst QuoteItem = styled.div`\\n  margin-bottom: 3px;\\n`\\n\\nexport type TListItem = {\\n  title: string\\n  id: string\\n}\\n\\ntype DroppableComProps = {\\n  data: TListItem[]\\n  droppableWrapperId: string\\n  getItem: (item: TListItem, index: number) => ReactNode\\n}\\n\\n// type TOnDragEndFnParams = { source: { index: number }; destination: { index: number } }\\ntype DragDropContextComProps = {\\n  children: ReactNode\\n  onDragEndFn: (result: DropResult) => void\\n}\\n\\nexport const DragDropContextCom: FC<DragDropContextComProps> = ({ children, onDragEndFn }) => {\\n  const onDragEnd: OnDragEndResponder = (result) => {\\n    if (!result.destination) {\\n      return\\n    }\\n    if (result.destination.index === result.source.index) {\\n      return\\n    }\\n    onDragEndFn && onDragEndFn(result)\\n  }\\n\\n  return <DragDropContext onDragEnd={onDragEnd}>{children}</DragDropContext>\\n}\\n\\nexport const DroppableCom: FC<DroppableComProps> = ({ getItem, data = [], droppableWrapperId = 'contentId' }) => {\\n  return (\\n    <Droppable droppableId={droppableWrapperId} type={droppableWrapperId}>\\n      {(provided) => (\\n        <div ref={provided.innerRef} {...provided.droppableProps}>\\n          {data.map((item, index) => (\\n            <Draggable draggableId={String(item.id)} index={index} key={item.id}>\\n              {(provided) => (\\n                <QuoteItem ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\\n                  {getItem(item, index)}\\n                </QuoteItem>\\n              )}\\n            </Draggable>\\n          ))}\\n          {provided.placeholder}\\n        </div>\\n      )}\\n    </Droppable>\\n  )\\n}\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import { useState } from 'react'\\nimport { DragDropContextCom, DroppableCom, TListItem } from './components'\\nimport { DropResult } from 'react-beautiful-dnd'\\n\\nconst initList: TListItem[] = [\\n  { title: '111', id: 'sdd' },\\n  { title: '222', id: 'dsf' },\\n  { title: '333', id: 'as' },\\n  { title: '444', id: 'ds' },\\n  { title: '555', id: 'dgh' },\\n]\\n\\nconst DragBlock = () => {\\n  const [list, setList] = useState<TListItem[]>(initList)\\n  const onDragEndFn = (dragInfo: DropResult) => {\\n    const startIndex = dragInfo.source.index\\n    const endIndex = dragInfo.destination?.index\\n    const result = Array.from<TListItem>(list)\\n    const [removed] = result.splice(startIndex, 1)\\n    if (endIndex) result.splice(endIndex, 0, removed)\\n    setList(result)\\n  }\\n\\n  const getItem = (item: TListItem) => {\\n    return (\\n      <div\\n        key={item.id}\\n        style={{\\n          padding: '11px 15px',\\n          background: '#bac1e3',\\n          borderRadius: '3px',\\n        }}\\n      >\\n        {item.title}\\n      </div>\\n    )\\n  }\\n\\n  return (\\n    <DragDropContextCom onDragEndFn={onDragEndFn}>\\n      <DroppableCom data={list} getItem={getItem} droppableWrapperId=\\\"contentId\\\" />\\n    </DragDropContextCom>\\n  )\\n}\\n\\nexport default DragBlock\\n\"}],\"j6\":[{\"title\":\"components/dropdown.tsx\",\"codes\":\"import React, { FC } from 'react'\\nimport styled from 'styled-components'\\n\\nexport interface DropdownProps {\\n  menu: { key: string | number; label: React.ReactNode }[]\\n  children?: React.ReactNode | string\\n  style?: React.CSSProperties\\n}\\n\\nconst DefaultTriggerNode = () => <DefaultTriggerWrapper>Hover me</DefaultTriggerWrapper>\\n\\nconst Dropdown: FC<DropdownProps> = ({ children, menu = [], style }) => {\\n  return (\\n    <DropdownWrapper style={style}>\\n      <div className=\\\"triggerWrapper\\\">{children || <DefaultTriggerNode />}</div>\\n      <div className=\\\"contentWrapper\\\">\\n        <div className=\\\"menuWrapper\\\">\\n          {menu.map((item) => {\\n            return (\\n              <div className=\\\"menuItem\\\" key={item.key}>\\n                {item.label}\\n              </div>\\n            )\\n          })}\\n        </div>\\n      </div>\\n    </DropdownWrapper>\\n  )\\n}\\n\\nconst DefaultTriggerWrapper = styled.div`\\n  font-size: 0;\\n  margin-left: 10px;\\n`\\n\\nconst DropdownWrapper = styled.div`\\n  position: relative;\\n  display: inline-block;\\n  &:hover > div:nth-child(2) {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n  .contentWrapper {\\n    position: absolute;\\n    top: 100%;\\n    left: 0;\\n    z-index: 2;\\n    transform-origin: 0 0;\\n    transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n    transform: scale(0);\\n    opacity: 0;\\n    width: max-content;\\n    .menuWrapper {\\n      margin-top: 5px;\\n      background: #fff;\\n      box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\\n      border-radius: 8px;\\n    }\\n  }\\n`\\nexport const MenuItemWrapper = styled.div`\\n  background: #ffffff;\\n  border-radius: 10px;\\n  display: flex;\\n  align-items: center;\\n  cursor: pointer;\\n  transition: all linear 0.2s;\\n  padding: 8px 11px 8px 9px;\\n  &:hover {\\n    background: #73d37b;\\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\\n  }\\n`\\nexport const MenuItemText = styled.div`\\n  font-style: normal;\\n  font-weight: 400;\\n  font-size: 14px;\\n  text-transform: capitalize;\\n  color: #252525;\\n`\\nexport default Dropdown\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Dropdown, { MenuItemWrapper, MenuItemText } from './components/dropdown'\\nimport { CopyOutlined, EyeOutlined } from '@ant-design/icons'\\nconst Demo = () => {\\n  const onCopy = () => {}\\n  const onViewENS = () => {}\\n  return (\\n    <>\\n      <Dropdown\\n        menu={[\\n          {\\n            key: 'copy',\\n            label: (\\n              <MenuItemWrapper onClick={onCopy}>\\n                <CopyOutlined />\\n                <MenuItemText style={{ marginLeft: 5 }}>Copy share link</MenuItemText>\\n              </MenuItemWrapper>\\n            ),\\n          },\\n          {\\n            key: 'viewExternalLink',\\n            label: (\\n              <MenuItemWrapper onClick={onViewENS}>\\n                <EyeOutlined />\\n                <MenuItemText style={{ marginLeft: 5 }}>View on ENS</MenuItemText>\\n              </MenuItemWrapper>\\n            ),\\n          },\\n        ]}\\n      >\\n        Hover me\\n      </Dropdown>\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}],\"xw\":[{\"title\":\"demo.tsx\",\"codes\":\"import { useEffect, useState } from 'react'\\nimport './highlight.css'\\nimport { highlight, languages } from 'prismjs/components/prism-core'\\nimport 'prismjs/components/prism-clike'\\nimport 'prismjs/components/prism-markup'\\nimport 'prismjs/components/prism-javascript'\\nimport 'prismjs/components/prism-jsx'\\nimport 'prismjs/components/prism-typescript.js'\\nimport 'prismjs/components/prism-tsx.js'\\n\\nconst jsxCode = `import React from 'react';\\nimport { Checkbox } from 'antd';\\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\\n\\nconst onChange = (e: CheckboxChangeEvent) => {\\n  console.log(e.target.checked);\\n};\\n\\nconst App: React.FC = () => <Checkbox onChange={onChange}>Checkbox</Checkbox>;\\n\\nexport default App;`\\n\\nconst HighlightCode = () => {\\n  const [highlightCodes, setHighlightCodes] = useState<string>('')\\n  const getHighlightCode = () => {\\n    const res = highlight(jsxCode, languages.tsx, 'tsx')\\n    setHighlightCodes(res)\\n  }\\n  useEffect(() => {\\n    getHighlightCode()\\n  }, [])\\n  return (\\n    <div>\\n      <pre className=\\\"language-jsx\\\">\\n        <code dangerouslySetInnerHTML={{ __html: highlightCodes }} />\\n      </pre>\\n    </div>\\n  )\\n}\\n\\nexport default HighlightCode\\n\"},{\"title\":\"highlight.css\",\"codes\":\"pre,\\ncode {\\n  color: black;\\n  font-family: 'Lucida Console', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\\n  line-height: 2;\\n  direction: ltr;\\n\\n  white-space: pre;\\n  text-align: left;\\n  word-wrap: normal;\\n  word-break: normal;\\n  word-spacing: normal;\\n  tab-size: 4;\\n  hyphens: none;\\n  background: #f8f8f8 !important;\\n  font-size: 12px !important;\\n}\\npre {\\n  padding: 12px 22px;\\n  border-radius: 3px;\\n  border: 1px solid #f1e9e9;\\n}\\nblockquote {\\n  color: #666;\\n  border-left: 5px solid #cbcbcb;\\n  background-color: #f8f8f8;\\n  font-size: 1em;\\n  padding: 0 13px;\\n}\\nblockquote p {\\n  padding: 8px 0;\\n}\\n\\n/*\u9ad8\u4eae\u4ee3\u7801start*/\\n.token.comment,\\n.token.prolog,\\n.token.doctype,\\n.token.cdata {\\n  color: slategray;\\n}\\n\\n.token.punctuation {\\n  color: #999;\\n}\\n\\n.namespace {\\n  opacity: 0.7;\\n}\\n\\n.token.property,\\n.token.tag,\\n.token.boolean,\\n.token.number,\\n.token.constant,\\n.token.symbol,\\n.token.deleted {\\n  color: #f81d22;\\n}\\n\\n.token.selector,\\n.token.attr-name,\\n.token.string,\\n.token.char,\\n.token.builtin,\\n.token.inserted {\\n  color: #0b8235;\\n}\\n\\n.token.operator,\\n.token.entity,\\n.token.url,\\n.language-css .token.string,\\n.style .token.string {\\n  color: #0b8235;\\n}\\n\\n.token.atrule,\\n.token.attr-value,\\n.token.keyword {\\n  color: #008dff;\\n}\\n\\n.token.function {\\n  color: #f81d22;\\n}\\n\\n.token.regex,\\n.token.important,\\n.token.variable {\\n  color: #e90;\\n}\\n\\n.token.important,\\n.token.bold {\\n  font-weight: bold;\\n}\\n\\n.token.italic {\\n  font-style: italic;\\n}\\n\\n.token.entity {\\n  cursor: help;\\n}\\n/*\u9ad8\u4eae\u4ee3\u7801start*/\\n\"}],\"vV\":[{\"title\":\"components/loadingImage.tsx\",\"codes\":\"import { useEffect, FC, useState, ReactNode, CSSProperties } from 'react'\\nimport styled from 'styled-components'\\nimport { LoadingOutlined } from '@ant-design/icons'\\n\\ntype TLoadingImageProps = {\\n  src: string\\n  style?: CSSProperties\\n  errorImg?: string\\n  children?: ReactNode\\n}\\nconst defaultErrorImg =\\n  'https://img.freepik.com/free-vector/oops-404-error-with-broken-robot-concept-illustration_114360-5529.jpg?w=826&t=st=1673252592~exp=1673253192~hmac=86553ee3acf8c0d791425690e0d0489f5af81a25d09a17aee5b15539bd53d9fb'\\nconst LoadingImage: FC<TLoadingImageProps> = (props) => {\\n  const [src, setSrc] = useState('')\\n  const [isFlag, setIsFlag] = useState(false)\\n  const loadImg = () => {\\n    if (isFlag) return\\n    const imgDom = new Image()\\n    imgDom.src = props.src\\n    imgDom.onload = function () {\\n      setIsFlag(true)\\n      setSrc(props.src)\\n    }\\n    imgDom.onerror = function () {\\n      setIsFlag(true)\\n      setSrc((props.errorImg as string) || defaultErrorImg)\\n    }\\n  }\\n  useEffect(() => {\\n    loadImg()\\n  }, [props.src])\\n  return (\\n    <ImageWrapper background={src} style={props.style}>\\n      {!isFlag && (\\n        <div className=\\\"loaderWrapper\\\">\\n          <LoadingOutlined />\\n        </div>\\n      )}\\n      {props.children}\\n    </ImageWrapper>\\n  )\\n}\\nconst ImageWrapper = styled.div<{ background: string }>`\\n  width: 260px;\\n  height: 260px;\\n  background: ${({ background }) => `url(${background}) no-repeat top / cover`};\\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.1);\\n  border-radius: 14px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n  .loaderWrapper {\\n    width: 100%;\\n    height: 100%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    font-size: 25px;\\n  }\\n`\\nexport default LoadingImage\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport LoadingImage from './components/loadingImage'\\nconst Demo = () => {\\n  return (\\n    <DemoWrapper>\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x46d853692b065ec4133f2b09358b7d5e041647387e34e77d88701d88e791df24/image\\\" />\\n      <LoadingImage src=\\\"https://meta.image.space.id/image/mainnet/12059547966807490816228010420051176187045361161507704345209897480251462207257.svg\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\\" />\\n      <LoadingImage src=\\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0x6075cbad454e9d013dcda87e535bdd5bbde317f2a782195fb30c5814b6250eaf/image\\\" />\\n      <LoadingImage src=\\\"https://meta.image.space.id/image/mainnet/90426324112266211007913599732264242099168962270929413669682070908934219180460.svg\\\" />\\n      <LoadingImage src=\\\"https://metadata.ens.domains/mainnet/0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85/0xab0d340a4fbc77f95abf402bbc9ae12f2f628d4ecc760ad32afbd468071d3188/image\\\" />\\n    </DemoWrapper>\\n  )\\n}\\nconst DemoWrapper = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(auto-fill, 260px);\\n  grid-gap: 10px;\\n  justify-content: space-between;\\n`\\nexport default Demo\\n\"}],\"kY\":[{\"title\":\"demo.tsx\",\"codes\":\"import React, { useState } from 'react'\\nimport './index.css'\\nimport { marked } from 'marked'\\n\\nconst Md2Html = () => {\\n  const [html, setHtml] = useState<string>('')\\n  const md2html = (mdData: string) => {\\n    return marked(mdData, {\\n      renderer: new marked.Renderer(),\\n      gfm: true,\\n      breaks: false,\\n    })\\n  }\\n  const onTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\\n    setHtml(md2html(e.target.value))\\n  }\\n  return (\\n    <div className=\\\"md2html\\\">\\n      <div className=\\\"left block\\\">\\n        <textarea name=\\\"\\\" id=\\\"textarea\\\" onChange={onTextareaChange} placeholder=\\\"\u8bf7\u8f93\u5165md\\\" />\\n      </div>\\n      <div className=\\\"right block\\\" dangerouslySetInnerHTML={{ __html: html }} />\\n    </div>\\n  )\\n}\\n\\nexport default Md2Html\\n\"},{\"title\":\"index.css\",\"codes\":\".md2html {\\n  display: flex;\\n  width: 100%;\\n}\\n.block {\\n  width: 50%;\\n  height: 600px;\\n  padding: 10px 15px 0;\\n  border-radius: 3px;\\n  border: 1px solid rgba(0, 0, 0, 0.06);\\n}\\n.left {\\n  background: #292d3e;\\n  position: relative;\\n}\\n.right {\\n  overflow: scroll;\\n  margin-left: 12px;\\n}\\n#textarea {\\n  width: 100%;\\n  display: block;\\n  resize: none;\\n  height: 100%;\\n  outline: none;\\n  border: none;\\n  background: #292d3e;\\n  color: #fff;\\n  padding: 0;\\n}\\nblockquote {\\n  margin: 0;\\n}\\n\"}],\"vr\":[{\"title\":\"components/popover.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport { FC, ReactNode } from 'react'\\n\\nexport interface PopoverProps {\\n  content: ReactNode\\n  children: ReactNode\\n}\\n\\nconst Popover: FC<PopoverProps> = ({ content, children }) => {\\n  return (\\n    <PopoverWrapper>\\n      <TriggerWrapper>{children}</TriggerWrapper>\\n      <ContentWrapper>\\n        <Content>{content}</Content>\\n      </ContentWrapper>\\n    </PopoverWrapper>\\n  )\\n}\\n\\nconst TriggerWrapper = styled.div`\\n  display: flex;\\n  align-items: center;\\n`\\n\\nconst PopoverWrapper = styled.div`\\n  position: relative;\\n  &:hover > div:nth-child(2) {\\n    opacity: 1;\\n    transform: scale(1);\\n  }\\n`\\nconst ContentWrapper = styled.div`\\n  position: absolute;\\n  top: 100%;\\n  left: 0;\\n  z-index: 2;\\n  transform-origin: 0 0;\\n  transition: all cubic-bezier(0.39, 0.58, 0.57, 1) 0.2s;\\n  transform: scale(0);\\n  opacity: 0;\\n`\\nconst Content = styled.div`\\n  position: relative;\\n  margin-top: 9px;\\n  padding: 13px 23px 13px 15px;\\n  background: #fff;\\n  box-shadow: 0 6px 16px 0 rgb(0 0 0 / 8%), 0 3px 6px -4px rgb(0 0 0 / 12%), 0 9px 28px 8px rgb(0 0 0 / 5%);\\n  border-radius: 8px;\\n  &:after {\\n    content: '';\\n    position: absolute;\\n    z-index: 2;\\n    left: 14px;\\n    top: 0;\\n    width: 13px;\\n    height: 13px;\\n    background: #fff;\\n    border-radius: 2px;\\n    transform: rotate(45deg) translateY(-50%);\\n  }\\n`\\nexport default Popover\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Popover from './components/popover'\\nconst Demo = () => {\\n  return (\\n    <>\\n      <Popover\\n        content={\\n          <>\\n            <div>Content1Content1Content1</div>\\n            <div>Content2Content2Content2</div>\\n            <div>Content3Content3Content3</div>\\n            <div>Content4Content4Content4</div>\\n            <div>Content5Content5Content5</div>\\n          </>\\n        }\\n      >\\n        Hover me\\n      </Popover>\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}],\"Kz\":[{\"title\":\"components/Sortable.tsx\",\"codes\":\"import { CSSProperties, useEffect, useRef } from 'react'\\nimport styled from 'styled-components'\\n\\nexport enum Sort {\\n  DEFAULT,\\n  DESC,\\n  ASC,\\n}\\nexport default function Sortable(props: {\\n  value: Sort\\n  onChange: (sort: Sort) => void\\n  className?: string\\n  style?: CSSProperties\\n}) {\\n  const ref = useRef<HTMLSpanElement>(null)\\n  useEffect(() => {\\n    const el = ref.current?.parentElement\\n    if (el) {\\n      const clickHandler = () => {\\n        props.onChange(props.value === Sort.DEFAULT ? Sort.DESC : props.value === Sort.DESC ? Sort.ASC : Sort.DEFAULT)\\n      }\\n      el.addEventListener('click', clickHandler)\\n      return () => {\\n        el.removeEventListener('click', clickHandler)\\n      }\\n    }\\n  }, [props.value])\\n  return (\\n    <SortableWrapper ref={ref} className={props.className} style={props.style}>\\n      <Triangle src={props.value === Sort.ASC ? 'Images.TABLE.UP_ACTIVE_SVG' : 'Images.TABLE.UP_SVG'} />\\n      <Triangle src={props.value === Sort.DESC ? 'Images.TABLE.DOWN_ACTIVE_SVG' : 'Images.TABLE.DOWN_SVG'} />\\n    </SortableWrapper>\\n  )\\n}\\n\\nconst SortableWrapper = styled.span`\\n  height: 14px;\\n  width: 7px;\\n  cursor: pointer;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  flex-direction: column;\\n  margin-left: 4px;\\n`\\n\\nconst Triangle = styled.img`\\n  width: 7px;\\n  height: 7px;\\n`\\n\"},{\"title\":\"components/Table.tsx\",\"codes\":\"import { CSSProperties } from 'react'\\nimport styled, { css } from 'styled-components'\\nimport Sortable, { Sort } from './Sortable'\\n\\nexport type TableAlign = 'left' | 'center' | 'right'\\n\\nexport interface TableColumn<T extends object> {\\n  name: string\\n  headStyle?: CSSProperties\\n  itemStyle?: CSSProperties\\n  key?: keyof T\\n  render?: (data: T, index: number, key?: keyof T) => JSX.Element | string\\n  flex?: number\\n  width?: string\\n  align?: TableAlign\\n  sortable?: boolean\\n  sort?: Sort\\n}\\n\\nexport default function Table<T extends object>(props: {\\n  data: T[]\\n  columns: TableColumn<T>[]\\n  gap?: string\\n  keyName?: keyof T\\n  loading?: boolean\\n  className?: string\\n  style?: CSSProperties\\n  updateColumns?: (columns: TableColumn<T>[]) => void\\n  onRowClick?: (data: T, index: number) => void\\n}) {\\n  return (\\n    <TableWrapper style={props.style} className={props.className}>\\n      <TableHeader className={'table-header'} gap={props.gap}>\\n        {props.columns.map((column) => (\\n          <Th\\n            key={column.name}\\n            className={'table-th'}\\n            style={column.headStyle}\\n            width={column.width}\\n            flex={column.flex || 1}\\n            clickable={column.sortable}\\n          >\\n            {column.name}{' '}\\n            {column.sortable && (\\n              <Sortable\\n                value={column.sort || Sort.DEFAULT}\\n                onChange={(sort: Sort) => {\\n                  const clonedColumns: typeof props.columns = JSON.parse(JSON.stringify(props.columns))\\n                  const target = clonedColumns.find((x) => x.name === column.name)\\n                  if (target) {\\n                    target.sort = sort\\n                    props.updateColumns && props.updateColumns(clonedColumns)\\n                  }\\n                }}\\n              />\\n            )}\\n          </Th>\\n        ))}\\n      </TableHeader>\\n      <TableBody className={'table-body'}>\\n        {props.data.map((d, index) => (\\n          <TableRow\\n            onClick={() => props.onRowClick && props.onRowClick(d, index)}\\n            key={props.keyName ? (d[props.keyName] as any as string) : index}\\n            className={'table-row'}\\n            gap={props.gap}\\n            clickable={!!props.onRowClick}\\n          >\\n            {props.columns.map((column) => {\\n              let renderResult = column.render\\n                ? column.render(d, index, column.key)\\n                : column.key\\n                ? (d[column.key] as any as string)\\n                : column.key\\n              // @ts-ignore\\n              if ([undefined, '', null].includes(renderResult)) {\\n                renderResult = '-'\\n              }\\n\\n              return (\\n                <Td\\n                  key={column.name}\\n                  style={column.itemStyle}\\n                  className={'table-td'}\\n                  flex={column.flex || 1}\\n                  width={column.width}\\n                  align={column.align}\\n                >\\n                  {/*//@ts-ignore*/}\\n                  {renderResult}\\n                </Td>\\n              )\\n            })}\\n          </TableRow>\\n        ))}\\n      </TableBody>\\n    </TableWrapper>\\n  )\\n}\\n\\nconst TableWrapper = styled.div`\\n  width: 100%;\\n  position: relative;\\n`\\nconst TableHeader = styled.div<{ gap?: string }>`\\n  height: 50px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  position: relative;\\n  border-radius: 5px;\\n  background: #f6f6f6;\\n  & > :first-child {\\n    margin-left: 0;\\n  }\\n  & > * {\\n    margin-left: ${({ gap }) => gap || 0};\\n  }\\n`\\n\\nconst Th = styled.span<{ width?: string; flex?: number; clickable?: boolean }>`\\n  user-select: none;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n  ${({ width }) =>\\n    width\\n      ? css`\\n          width: ${width};\\n        `\\n      : ''};\\n  ${({ flex, width }) =>\\n    !width && flex\\n      ? css`\\n          flex: ${flex};\\n        `\\n      : ''};\\n  font-size: 14px;\\n  color: #9f9f9f;\\n  text-align: center;\\n  cursor: ${(props) => (props.clickable ? 'pointer' : 'inherit')};\\n`\\nconst TableBody = styled.ul`\\n  width: 100%;\\n  position: relative;\\n  padding: 0;\\n`\\n\\nconst TableRow = styled.li<{ gap?: string; clickable?: boolean }>`\\n  height: 50px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  position: relative;\\n  cursor: ${(props) => {\\n    return !!props.clickable ? 'pointer' : 'inherit'\\n  }};\\n  & > :first-child {\\n    margin-left: 0;\\n  }\\n  & > * {\\n    margin-left: ${({ gap }) => gap || 0};\\n  }\\n  border-radius: 5px;\\n  transition: all 0.15s linear;\\n  &:hover {\\n    box-shadow: 0px 4px 10px rgba(114, 175, 120, 0.1);\\n  }\\n  border-bottom: solid 1px #e2e2e2;\\n`\\nconst Td = styled.div<{ width?: string; flex?: number; align?: TableAlign }>`\\n  height: 100%;\\n  ${({ width }) =>\\n    width\\n      ? css`\\n          width: ${width};\\n        `\\n      : ''};\\n  ${({ flex, width }) =>\\n    !width && flex\\n      ? css`\\n          flex: ${flex};\\n        `\\n      : ''};\\n  font-size: 14px;\\n  color: #737373;\\n  line-height: 50px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: ${({ align }) => (align === 'left' ? 'flex-start' : align === 'right' ? 'flex-end' : 'center')};\\n  position: relative;\\n`\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Table, { TableColumn } from './components/Table'\\n\\ntype TListItem = {\\n  price: number\\n  price_usd: number\\n  expiration: string\\n  from: string\\n}\\nconst columns: TableColumn<TListItem>[] = [\\n  {\\n    name: 'Price',\\n    sortable: false,\\n    key: 'price',\\n  },\\n  {\\n    name: 'USD Price',\\n    sortable: false,\\n    key: 'price_usd',\\n    render: (data) => (data.price_usd ? `\xa5${data.price_usd}` : '-'),\\n  },\\n  {\\n    name: 'Expiration',\\n    sortable: false,\\n    key: 'expiration',\\n  },\\n  {\\n    name: 'From',\\n    sortable: false,\\n    key: 'from',\\n  },\\n]\\nconst Demo = () => {\\n  const tableData: TListItem[] = [\\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '\u56db\u5ddd\u7701\u6210\u90fd\u5e02' },\\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '\u56db\u5ddd\u7701\u6210\u90fd\u5e02' },\\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '\u56db\u5ddd\u7701\u6210\u90fd\u5e02' },\\n    { price: 23423, price_usd: 123123, expiration: '2022-09-15 18:36:28', from: '\u56db\u5ddd\u7701\u6210\u90fd\u5e02' },\\n  ]\\n  return (\\n    <>\\n      <Table data={tableData} columns={columns} />\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}],\"eA\":[{\"title\":\"components/tabs.tsx\",\"codes\":\"import styled from 'styled-components'\\nimport React, { useState, useEffect, FC, memo } from 'react'\\n\\nexport interface TabsItemProps {\\n  key: React.Key\\n  label: React.ReactNode | string\\n  children: React.ReactNode | string\\n}\\n\\nexport type tabsHeaderProps = Omit<TabsItemProps, 'children'>\\n\\ninterface TabsProps {\\n  items: TabsItemProps[]\\n  defaultTab?: string | number\\n  onChange?: (val: tabsHeaderProps) => void\\n}\\n\\nconst Tabs: FC<TabsProps> = ({ items, onChange, defaultTab }) => {\\n  const [hadRenderTabPane, setHadRenderTabPane] = useState<(string | number)[]>(\\n    defaultTab ? [defaultTab] : [items[0].key]\\n  )\\n  const [checkedId, setCheckedId] = useState<string | number>(defaultTab || items[0].key)\\n  const [offsetLeft, setOffsetLeft] = useState(0)\\n  const [offsetWidth, setOffsetWidth] = useState(0)\\n\\n  const tabsHeaderData: tabsHeaderProps[] = items.map((item) => {\\n    return { key: item.key, label: item.label }\\n  })\\n\\n  const getDefaultActiveKey = () => {\\n    const activeKey = items[0]?.key\\n    setCheckedId(activeKey)\\n    return activeKey\\n  }\\n\\n  const handleClick = (data: tabsHeaderProps, e: React.MouseEvent<HTMLDivElement>) => {\\n    setHadRenderTabPane([...hadRenderTabPane, data.key])\\n    setOffsetLeft((e.target as HTMLDivElement).offsetLeft)\\n    setOffsetWidth((e.target as HTMLDivElement).offsetWidth)\\n    setCheckedId(data.key)\\n    onChange && onChange(data)\\n  }\\n\\n  useEffect(() => {\\n    !defaultTab && getDefaultActiveKey()\\n  }, [items])\\n  useEffect(() => {\\n    if (defaultTab) {\\n      setCheckedId(defaultTab)\\n      setHadRenderTabPane([...hadRenderTabPane, defaultTab])\\n    }\\n  }, [defaultTab])\\n  return (\\n    <>\\n      <TabsContentWrapper>\\n        <TabsWrapper>\\n          {tabsHeaderData.map((item) => {\\n            return (\\n              <TabsItem\\n                isChecked={item.key === checkedId}\\n                key={item.key}\\n                ref={(node) => {\\n                  if (checkedId === item.key) {\\n                    setTimeout(() => {\\n                      const offsetWidth = (node as HTMLDivElement)?.offsetWidth\\n                      const offsetLeft = (node as HTMLDivElement)?.offsetLeft\\n                      if (offsetWidth) {\\n                        setOffsetWidth(offsetWidth)\\n                        setOffsetLeft(offsetLeft)\\n                      }\\n                    }, 100)\\n                  }\\n                }}\\n                onClick={(e) => {\\n                  handleClick(item, e)\\n                }}\\n              >\\n                {item.label}\\n              </TabsItem>\\n            )\\n          })}\\n        </TabsWrapper>\\n        <Line left={offsetLeft} width={offsetWidth} />\\n        {hadRenderTabPane.length > 0 &&\\n          items.map((item) => {\\n            return (\\n              <>\\n                {hadRenderTabPane.includes(item.key) && (\\n                  <div key={item.key} style={{ display: item.key === checkedId ? 'block' : 'none' }}>\\n                    {item.children}\\n                  </div>\\n                )}\\n              </>\\n              // <div key={item.key} style={{ display: item.key === checkedId ? 'block' : 'none' }}>\\n              //   {item.children}\\n              // </div>\\n            )\\n          })}\\n      </TabsContentWrapper>\\n    </>\\n  )\\n}\\n\\nconst TabsContentWrapper = styled.div`\\n  width: 100%;\\n`\\n\\nconst TabsWrapper = styled.div`\\n  display: flex;\\n  position: relative;\\n`\\n\\nconst TabsItem = styled.div<{ isChecked: boolean }>`\\n  font-style: normal;\\n  font-weight: 400;\\n  font-size: 16px;\\n  line-height: 20px;\\n  text-transform: capitalize;\\n  color: ${({ isChecked }) => (isChecked ? '#1677ff' : '#252525')};\\n  margin-right: 52px;\\n  cursor: pointer;\\n  transition: all linear 0.15s;\\n  user-select: none;\\n  padding: 0 8px;\\n  display: flex;\\n  align-items: center;\\n  &:hover {\\n    color: #1677ff;\\n  }\\n`\\n\\nconst Line = styled.div<{ left: number; width: number }>`\\n  width: 100%;\\n  height: 1px;\\n  background: #1677ff;\\n  position: relative;\\n  margin-top: 10px;\\n  &::after {\\n    content: '';\\n    position: absolute;\\n    width: ${({ width }) => width + 'px'};\\n    height: 2px;\\n    background: #73d37b;\\n    left: ${({ left }) => left + 'px'};\\n    top: 0;\\n    transition: all linear 0.15s;\\n  }\\n`\\n\\nexport default memo(Tabs)\\n\"},{\"title\":\"demo.tsx\",\"codes\":\"import Tabs, { TabsItemProps } from './components/tabs'\\nconst Demo = () => {\\n  const tabsData: TabsItemProps[] = [\\n    {\\n      key: 'categories',\\n      label: 'Top Categories',\\n      children: (\\n        <div style={{ padding: '10px 5px' }}>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n          <div>Top Categories Top Categories Top Categories</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: 'sales',\\n      label: 'Top Sales',\\n      children: (\\n        <div style={{ padding: '10px 5px' }}>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n          <div>Top Sales Top Sales Top Sales Top Sales Top Sales</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: 'owners',\\n      label: 'Top Owners',\\n      children: (\\n        <div style={{ padding: '10px 5px' }}>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n          <div>Top Owners Top Owners Top Owners Top Owners Top Owners</div>\\n        </div>\\n      ),\\n    },\\n    {\\n      key: 'gainers',\\n      label: 'Top Gainers',\\n      children: (\\n        <div style={{ padding: '10px 5px' }}>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n          <div>Top Gainers Top Gainers Top Gainers Top Gainers Top Gainers</div>\\n        </div>\\n      ),\\n    },\\n  ]\\n  return (\\n    <>\\n      <Tabs\\n        // defaultTab='categories'\\n        items={tabsData}\\n        onChange={(data) => {\\n          console.log(data)\\n        }}\\n      />\\n    </>\\n  )\\n}\\nexport default Demo\\n\"}]}")}}]);